/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

/**
 * Lexical Specification
 *
 * Contributors:
 *      Jeanderson Barros Candido - http://jeandersonbc.github.io
 *      Thiago Ferreira Patricio - http://github.com/tferreirap
 *      Patrik Pekarčík - https://github.com/ppatrik
 */
package net.acptools.suite.ide.lang.cpp.generated;

import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>./spec-cpp/cpp.jflex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\17\1\102\1\103\1\16\22\0\1\20\1\53\1\100"+
    "\1\52\1\0\1\61\1\62\1\104\1\76\1\77\1\15\1\54\1\73"+
    "\1\5\1\65\1\14\12\1\1\72\1\66\1\60\1\57\1\56\1\67"+
    "\1\0\1\47\3\3\1\4\1\7\5\3\1\11\5\3\1\51\1\46"+
    "\1\50\1\13\5\3\1\70\1\101\1\71\1\63\1\2\1\0\1\23"+
    "\1\42\1\25\1\34\1\26\1\6\1\37\1\41\1\24\1\3\1\43"+
    "\1\10\1\33\1\32\1\35\1\31\1\3\1\27\1\21\1\22\1\12"+
    "\1\45\1\44\1\36\1\30\1\40\1\75\1\64\1\74\1\55\6\0"+
    "\1\102\u1fa2\0\1\102\1\102\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\4\3\1\5\1\6"+
    "\2\7\21\3\1\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\2\1\1\2\1\0\1\35\1\36\1\37\1\40\1\0"+
    "\10\3\1\7\1\0\1\41\1\42\11\3\1\43\16\3"+
    "\1\44\12\3\1\0\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\0\1\53\1\54\1\55\1\0\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\35\1\64\1\65\1\0"+
    "\1\66\3\0\1\67\1\0\3\3\1\70\5\3\2\0"+
    "\13\3\1\71\14\3\1\72\17\3\1\0\1\73\1\74"+
    "\1\0\1\75\4\3\1\76\3\3\1\0\7\3\1\77"+
    "\1\3\1\100\1\3\1\101\1\3\1\102\2\3\1\103"+
    "\1\104\6\3\1\105\5\3\1\106\1\3\1\107\1\110"+
    "\1\111\2\3\1\112\1\0\1\35\1\0\1\113\1\114"+
    "\1\115\1\116\1\3\1\117\5\3\1\120\5\3\1\121"+
    "\1\122\14\3\1\123\1\3\1\124\1\3\1\0\1\3"+
    "\1\125\1\126\1\127\1\130\1\131\1\132\1\133\4\3"+
    "\1\134\1\3\1\135\1\3\1\136\4\3\1\137\3\3"+
    "\1\0\3\3\1\140\1\141\5\3\1\142\2\3\1\110"+
    "\1\3\1\0\1\143\1\3\1\144\1\145\1\146\1\147"+
    "\1\3\1\150\1\151\1\152\1\153\1\154\1\3\1\155"+
    "\3\3\1\156";

  private static int [] zzUnpackAction() {
    int [] result = new int[338];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\105\0\u033c\0\u0381\0\u03c6"+
    "\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee"+
    "\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816"+
    "\0\u085b\0\105\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u09f9"+
    "\0\u0a3e\0\u0a83\0\105\0\105\0\105\0\105\0\u0ac8\0\105"+
    "\0\105\0\105\0\105\0\105\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc"+
    "\0\u0c21\0\105\0\u0c66\0\105\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a"+
    "\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\105"+
    "\0\105\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140"+
    "\0\u1185\0\u11ca\0\317\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323"+
    "\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b"+
    "\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773"+
    "\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\105\0\105\0\105"+
    "\0\u1911\0\105\0\105\0\u1956\0\u1956\0\u1956\0\u199b\0\u19e0"+
    "\0\105\0\105\0\105\0\105\0\105\0\105\0\u1a25\0\105"+
    "\0\105\0\u0b0d\0\105\0\u1a6a\0\u0b52\0\u1aaf\0\105\0\u1af4"+
    "\0\u1b39\0\u1b7e\0\u1bc3\0\317\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7"+
    "\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u1eff"+
    "\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\317\0\u20e2"+
    "\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b\0\u2280\0\u22c5\0\u230a"+
    "\0\u234f\0\u2394\0\u23d9\0\317\0\u241e\0\u2463\0\u24a8\0\u24ed"+
    "\0\u2532\0\u2577\0\u25bc\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715"+
    "\0\u275a\0\u279f\0\u27e4\0\u2829\0\105\0\u1956\0\u286e\0\105"+
    "\0\u28b3\0\u28f8\0\u293d\0\u2982\0\317\0\u29c7\0\u2a0c\0\u2a51"+
    "\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef\0\u2c34\0\u2c79"+
    "\0\317\0\u2cbe\0\317\0\u2d03\0\317\0\u2d48\0\317\0\u2d8d"+
    "\0\u2dd2\0\317\0\317\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b"+
    "\0\u2f70\0\317\0\u2fb5\0\u2ffa\0\u303f\0\u3084\0\u30c9\0\317"+
    "\0\u310e\0\317\0\u3153\0\317\0\u3198\0\u31dd\0\317\0\u3222"+
    "\0\u3267\0\u3267\0\317\0\317\0\317\0\317\0\u32ac\0\317"+
    "\0\u32f1\0\u3336\0\u337b\0\u33c0\0\u3405\0\317\0\u344a\0\u348f"+
    "\0\u34d4\0\u3519\0\u355e\0\317\0\317\0\u35a3\0\u35e8\0\u362d"+
    "\0\u3672\0\u36b7\0\u36fc\0\u3741\0\u3786\0\u37cb\0\u3810\0\u3855"+
    "\0\u389a\0\317\0\u38df\0\317\0\u3924\0\u3969\0\u39ae\0\u39f3"+
    "\0\317\0\317\0\317\0\317\0\317\0\317\0\u3a38\0\u3a7d"+
    "\0\u3ac2\0\u3b07\0\317\0\u3b4c\0\317\0\u3b91\0\317\0\u3bd6"+
    "\0\u3c1b\0\u3c60\0\u3ca5\0\317\0\u3cea\0\u3d2f\0\u3d74\0\u3db9"+
    "\0\u3dfe\0\u3e43\0\u3e88\0\317\0\317\0\u3ecd\0\u3f12\0\u3f57"+
    "\0\u3f9c\0\u3fe1\0\317\0\u4026\0\u406b\0\317\0\u40b0\0\u40f5"+
    "\0\317\0\u413a\0\317\0\317\0\317\0\317\0\u417f\0\317"+
    "\0\317\0\317\0\317\0\105\0\u41c4\0\317\0\u4209\0\u424e"+
    "\0\u4293\0\317";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[338];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\2\4\1\5\1\6\1\7\1\10"+
    "\1\4\1\11\1\4\1\12\1\13\1\14\2\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\4\1\25"+
    "\1\26\1\4\1\27\1\30\1\4\1\31\2\4\1\32"+
    "\1\4\1\33\1\34\1\35\1\4\1\36\1\4\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\2\2\1\15"+
    "\1\66\106\0\1\3\6\0\4\67\51\0\1\70\20\0"+
    "\4\4\1\0\6\4\5\0\31\4\34\0\1\71\3\0"+
    "\1\72\50\0\1\73\1\74\5\0\1\75\20\0\4\4"+
    "\1\0\2\4\1\76\3\4\5\0\2\4\1\77\1\100"+
    "\10\4\1\101\14\4\34\0\4\4\1\0\6\4\5\0"+
    "\26\4\1\102\2\4\34\0\4\4\1\0\6\4\5\0"+
    "\14\4\1\103\14\4\34\0\4\4\1\0\6\4\5\0"+
    "\1\104\10\4\1\105\17\4\47\0\1\106\1\107\41\0"+
    "\1\110\104\0\1\111\44\0\1\15\66\0\4\4\1\0"+
    "\6\4\5\0\1\4\1\112\1\4\1\113\14\4\1\114"+
    "\2\4\1\115\5\4\34\0\4\4\1\0\6\4\5\0"+
    "\6\4\1\116\1\117\10\4\1\120\10\4\34\0\4\4"+
    "\1\0\2\4\1\121\1\4\1\122\1\4\5\0\31\4"+
    "\34\0\4\4\1\0\1\123\5\4\5\0\11\4\1\124"+
    "\17\4\34\0\4\4\1\0\2\4\1\125\3\4\5\0"+
    "\2\4\1\126\11\4\1\127\3\4\1\130\10\4\34\0"+
    "\4\4\1\0\2\4\1\131\3\4\5\0\15\4\1\132"+
    "\13\4\34\0\4\4\1\0\6\4\5\0\5\4\1\133"+
    "\23\4\34\0\4\4\1\0\4\4\1\134\1\4\5\0"+
    "\6\4\1\135\22\4\34\0\4\4\1\0\4\4\1\136"+
    "\1\4\5\0\5\4\1\137\6\4\1\140\14\4\34\0"+
    "\4\4\1\0\6\4\5\0\5\4\1\141\6\4\1\142"+
    "\14\4\34\0\4\4\1\0\6\4\5\0\10\4\1\143"+
    "\20\4\34\0\4\4\1\0\6\4\5\0\14\4\1\144"+
    "\14\4\34\0\4\4\1\0\6\4\5\0\6\4\1\145"+
    "\1\146\4\4\1\147\14\4\34\0\4\4\1\0\6\4"+
    "\5\0\14\4\1\150\3\4\1\151\10\4\34\0\4\4"+
    "\1\0\6\4\5\0\14\4\1\152\14\4\34\0\4\4"+
    "\1\0\6\4\5\0\1\4\1\153\27\4\34\0\4\4"+
    "\1\0\6\4\5\0\30\4\1\154\57\0\1\155\137\0"+
    "\1\156\101\0\1\157\2\0\1\160\103\0\1\161\1\162"+
    "\104\0\1\163\25\0\56\164\1\165\1\166\1\167\17\164"+
    "\1\0\1\170\3\164\57\0\1\171\104\0\1\172\2\0"+
    "\1\173\101\0\1\174\104\0\1\175\4\0\1\176\21\0"+
    "\1\177\13\0\1\200\161\0\1\201\12\0\100\202\1\203"+
    "\1\204\3\202\101\205\1\206\2\205\1\203\10\0\4\67"+
    "\72\0\1\177\104\0\1\71\63\0\1\70\34\0\1\207"+
    "\70\0\1\177\63\0\1\210\20\0\4\4\1\0\6\4"+
    "\5\0\14\4\1\211\14\4\34\0\4\4\1\0\2\4"+
    "\1\212\3\4\5\0\31\4\34\0\4\4\1\0\6\4"+
    "\5\0\11\4\1\213\17\4\34\0\4\4\1\0\6\4"+
    "\5\0\6\4\1\214\22\4\34\0\4\4\1\0\3\4"+
    "\1\215\2\4\5\0\31\4\34\0\4\4\1\0\6\4"+
    "\5\0\11\4\1\216\17\4\34\0\4\4\1\0\6\4"+
    "\5\0\3\4\1\217\25\4\34\0\4\4\1\0\6\4"+
    "\5\0\1\220\2\4\1\221\25\4\33\0\16\106\1\14"+
    "\1\15\65\106\15\222\1\223\67\222\1\0\4\4\1\0"+
    "\6\4\5\0\2\4\1\224\3\4\1\225\22\4\34\0"+
    "\4\4\1\0\6\4\5\0\16\4\1\226\1\227\11\4"+
    "\34\0\4\4\1\0\6\4\5\0\14\4\1\230\14\4"+
    "\34\0\4\4\1\0\6\4\5\0\3\4\1\231\25\4"+
    "\34\0\4\4\1\0\4\4\1\232\1\4\5\0\31\4"+
    "\34\0\4\4\1\0\6\4\5\0\10\4\1\233\20\4"+
    "\34\0\4\4\1\0\6\4\5\0\3\4\1\234\25\4"+
    "\34\0\4\4\1\0\6\4\5\0\3\4\1\235\25\4"+
    "\34\0\4\4\1\0\6\4\5\0\1\4\1\236\27\4"+
    "\34\0\4\4\1\0\6\4\5\0\1\4\1\237\27\4"+
    "\34\0\4\4\1\0\6\4\5\0\2\4\1\240\26\4"+
    "\34\0\4\4\1\0\6\4\5\0\1\241\30\4\34\0"+
    "\4\4\1\0\6\4\5\0\11\4\1\242\17\4\34\0"+
    "\4\4\1\0\6\4\5\0\2\4\1\243\26\4\34\0"+
    "\4\4\1\0\6\4\5\0\1\244\30\4\34\0\4\4"+
    "\1\0\6\4\5\0\1\4\1\245\6\4\1\246\20\4"+
    "\34\0\4\4\1\0\6\4\5\0\1\4\1\247\14\4"+
    "\1\250\12\4\34\0\4\4\1\0\6\4\5\0\21\4"+
    "\1\251\7\4\34\0\4\4\1\0\6\4\5\0\14\4"+
    "\1\252\14\4\34\0\4\4\1\0\2\4\1\253\3\4"+
    "\5\0\31\4\34\0\4\4\1\0\6\4\5\0\23\4"+
    "\1\254\5\4\34\0\4\4\1\0\6\4\5\0\5\4"+
    "\1\255\23\4\34\0\4\4\1\0\1\256\5\4\5\0"+
    "\4\4\1\257\24\4\34\0\4\4\1\0\4\4\1\260"+
    "\1\4\5\0\31\4\34\0\4\4\1\0\6\4\5\0"+
    "\5\4\1\261\23\4\34\0\4\4\1\0\6\4\5\0"+
    "\1\4\1\262\27\4\34\0\4\4\1\0\6\4\5\0"+
    "\5\4\1\263\23\4\34\0\4\4\1\0\6\4\5\0"+
    "\1\4\1\264\27\4\34\0\4\4\1\0\6\4\5\0"+
    "\14\4\1\265\14\4\34\0\4\4\1\0\6\4\5\0"+
    "\6\4\1\266\22\4\34\0\4\4\1\0\6\4\5\0"+
    "\3\4\1\267\25\4\34\0\4\4\1\0\2\4\1\270"+
    "\3\4\5\0\3\4\1\271\25\4\34\0\4\4\1\0"+
    "\6\4\5\0\6\4\1\272\22\4\34\0\4\4\1\0"+
    "\5\4\1\273\5\0\31\4\65\0\1\274\131\0\1\275"+
    "\25\0\56\164\1\165\21\164\1\0\1\170\61\164\1\165"+
    "\1\276\20\164\1\0\1\170\21\164\2\0\62\164\2\0"+
    "\1\164\1\0\1\177\2\0\1\277\21\0\1\277\56\0"+
    "\16\202\2\0\62\202\2\0\1\202\16\205\2\0\62\205"+
    "\2\0\1\205\65\0\1\300\20\0\4\4\1\0\6\4"+
    "\5\0\2\4\1\301\26\4\34\0\4\4\1\0\6\4"+
    "\5\0\1\302\30\4\34\0\4\4\1\0\6\4\5\0"+
    "\2\4\1\303\26\4\34\0\4\4\1\0\6\4\5\0"+
    "\25\4\1\304\3\4\34\0\4\4\1\0\6\4\5\0"+
    "\16\4\1\305\12\4\34\0\4\4\1\0\6\4\5\0"+
    "\11\4\1\306\17\4\34\0\4\4\1\0\6\4\5\0"+
    "\3\4\1\307\25\4\34\0\4\4\1\0\6\4\5\0"+
    "\14\4\1\310\14\4\33\0\15\222\1\311\67\222\14\0"+
    "\1\15\1\223\70\0\4\4\1\0\6\4\5\0\1\4"+
    "\1\312\27\4\34\0\4\4\1\0\4\4\1\313\1\4"+
    "\5\0\3\4\1\314\25\4\34\0\4\4\1\0\6\4"+
    "\5\0\11\4\1\315\17\4\34\0\4\4\1\0\6\4"+
    "\5\0\5\4\1\316\23\4\34\0\4\4\1\0\6\4"+
    "\5\0\6\4\1\317\22\4\34\0\4\4\1\0\6\4"+
    "\5\0\1\4\1\320\27\4\34\0\4\4\1\0\6\4"+
    "\5\0\5\4\1\321\23\4\34\0\4\4\1\0\6\4"+
    "\5\0\5\4\1\322\23\4\34\0\4\4\1\0\6\4"+
    "\5\0\1\323\30\4\34\0\4\4\1\0\6\4\5\0"+
    "\16\4\1\324\12\4\34\0\4\4\1\0\6\4\5\0"+
    "\14\4\1\325\14\4\34\0\4\4\1\0\6\4\5\0"+
    "\1\326\30\4\34\0\4\4\1\0\6\4\5\0\5\4"+
    "\1\327\23\4\34\0\4\4\1\0\6\4\5\0\1\330"+
    "\1\331\27\4\34\0\4\4\1\0\6\4\5\0\6\4"+
    "\1\332\22\4\34\0\4\4\1\0\6\4\5\0\5\4"+
    "\1\333\23\4\34\0\4\4\1\0\6\4\5\0\5\4"+
    "\1\334\23\4\34\0\4\4\1\0\2\4\1\335\3\4"+
    "\5\0\31\4\34\0\4\4\1\0\4\4\1\336\1\4"+
    "\5\0\31\4\34\0\4\4\1\0\6\4\5\0\3\4"+
    "\1\337\25\4\34\0\4\4\1\0\2\4\1\340\3\4"+
    "\5\0\31\4\34\0\4\4\1\0\6\4\5\0\1\4"+
    "\1\341\27\4\34\0\4\4\1\0\2\4\1\342\3\4"+
    "\5\0\31\4\34\0\4\4\1\0\6\4\5\0\15\4"+
    "\1\343\13\4\34\0\4\4\1\0\6\4\5\0\2\4"+
    "\1\344\26\4\34\0\4\4\1\0\2\4\1\345\3\4"+
    "\5\0\31\4\34\0\4\4\1\0\6\4\5\0\21\4"+
    "\1\346\7\4\34\0\4\4\1\0\6\4\5\0\6\4"+
    "\1\347\22\4\34\0\4\4\1\0\6\4\5\0\14\4"+
    "\1\350\14\4\34\0\4\4\1\0\6\4\5\0\2\4"+
    "\1\351\26\4\34\0\4\4\1\0\6\4\5\0\5\4"+
    "\1\352\23\4\34\0\4\4\1\0\2\4\1\353\3\4"+
    "\5\0\31\4\34\0\4\4\1\0\6\4\5\0\13\4"+
    "\1\354\15\4\34\0\4\4\1\0\2\4\1\355\3\4"+
    "\5\0\31\4\34\0\4\4\1\0\6\4\5\0\2\4"+
    "\1\356\26\4\34\0\4\4\1\0\6\4\5\0\13\4"+
    "\1\357\15\4\34\0\4\4\1\0\6\4\5\0\3\4"+
    "\1\314\25\4\34\0\3\4\1\321\1\0\6\4\5\0"+
    "\31\4\60\0\1\360\60\0\1\361\3\0\1\362\46\0"+
    "\1\362\31\0\4\4\1\0\6\4\5\0\1\4\1\363"+
    "\27\4\34\0\4\4\1\0\6\4\5\0\5\4\1\364"+
    "\23\4\34\0\4\4\1\0\2\4\1\365\3\4\5\0"+
    "\31\4\34\0\3\4\1\364\1\0\6\4\5\0\31\4"+
    "\34\0\4\4\1\0\6\4\5\0\16\4\1\366\12\4"+
    "\34\0\4\4\1\0\6\4\5\0\16\4\1\367\12\4"+
    "\34\0\4\4\1\0\6\4\5\0\11\4\1\370\17\4"+
    "\33\0\14\222\1\15\1\311\67\222\1\0\4\4\1\0"+
    "\6\4\5\0\3\4\1\371\25\4\34\0\4\4\1\0"+
    "\6\4\5\0\4\4\1\372\24\4\34\0\4\4\1\0"+
    "\6\4\5\0\11\4\1\373\17\4\34\0\4\4\1\0"+
    "\6\4\5\0\5\4\1\374\23\4\34\0\4\4\1\0"+
    "\6\4\5\0\14\4\1\375\14\4\34\0\4\4\1\0"+
    "\6\4\5\0\1\4\1\376\27\4\34\0\4\4\1\0"+
    "\6\4\5\0\4\4\1\377\24\4\34\0\4\4\1\0"+
    "\6\4\5\0\3\4\1\u0100\5\4\1\u0101\1\4\1\u0102"+
    "\15\4\34\0\4\4\1\0\6\4\5\0\11\4\1\u0103"+
    "\17\4\34\0\4\4\1\0\6\4\5\0\1\u0104\30\4"+
    "\34\0\4\4\1\0\6\4\5\0\1\4\1\u0105\27\4"+
    "\34\0\4\4\1\0\6\4\5\0\3\4\1\u0106\25\4"+
    "\34\0\4\4\1\0\6\4\5\0\6\4\1\u0107\22\4"+
    "\34\0\4\4\1\0\6\4\5\0\3\4\1\u0108\25\4"+
    "\34\0\4\4\1\0\6\4\5\0\6\4\1\u0109\22\4"+
    "\34\0\4\4\1\0\6\4\5\0\1\u010a\30\4\34\0"+
    "\4\4\1\0\6\4\5\0\3\4\1\u010b\25\4\34\0"+
    "\4\4\1\0\6\4\5\0\5\4\1\u010c\23\4\34\0"+
    "\4\4\1\0\6\4\5\0\4\4\1\u010d\24\4\34\0"+
    "\4\4\1\0\4\4\1\u010e\1\4\5\0\31\4\34\0"+
    "\4\4\1\0\6\4\5\0\1\4\1\u010f\27\4\34\0"+
    "\4\4\1\0\2\4\1\u0110\3\4\5\0\31\4\34\0"+
    "\4\4\1\0\6\4\5\0\2\4\1\u0111\26\4\34\0"+
    "\4\4\1\0\6\4\5\0\22\4\1\u0112\6\4\34\0"+
    "\4\4\1\0\6\4\5\0\5\4\1\u0113\23\4\34\0"+
    "\4\4\1\0\6\4\5\0\5\4\1\u0114\23\4\34\0"+
    "\4\4\1\0\6\4\5\0\1\4\1\u0115\27\4\43\0"+
    "\1\u0116\75\0\1\361\104\0\4\4\1\0\6\4\5\0"+
    "\11\4\1\u0117\17\4\34\0\4\4\1\0\6\4\5\0"+
    "\4\4\1\u0118\24\4\34\0\4\4\1\0\6\4\5\0"+
    "\1\4\1\u0119\27\4\34\0\4\4\1\0\6\4\5\0"+
    "\16\4\1\u011a\12\4\34\0\4\4\1\0\6\4\5\0"+
    "\13\4\1\u011b\15\4\34\0\4\4\1\0\1\u011c\5\4"+
    "\5\0\31\4\34\0\4\4\1\0\6\4\5\0\20\4"+
    "\1\u011d\10\4\34\0\4\4\1\0\6\4\5\0\13\4"+
    "\1\u011e\15\4\34\0\4\4\1\0\6\4\5\0\2\4"+
    "\1\u011f\26\4\34\0\4\4\1\0\6\4\5\0\5\4"+
    "\1\u0120\23\4\34\0\4\4\1\0\6\4\5\0\2\4"+
    "\1\u0121\26\4\34\0\4\4\1\0\6\4\5\0\11\4"+
    "\1\u0122\17\4\34\0\4\4\1\0\6\4\5\0\11\4"+
    "\1\u0123\17\4\34\0\4\4\1\0\6\4\5\0\4\4"+
    "\1\u0124\24\4\34\0\4\4\1\0\6\4\5\0\11\4"+
    "\1\u0125\17\4\34\0\4\4\1\0\6\4\5\0\1\4"+
    "\1\u0126\27\4\34\0\4\4\1\0\6\4\5\0\4\4"+
    "\1\u0127\24\4\34\0\4\4\1\0\6\4\5\0\4\4"+
    "\1\u0128\24\4\34\0\4\4\1\0\6\4\5\0\5\4"+
    "\1\u0129\23\4\34\0\4\4\1\0\2\4\1\u012a\3\4"+
    "\5\0\31\4\34\0\4\4\1\0\6\4\5\0\7\4"+
    "\1\u012b\21\4\34\0\4\4\1\0\6\4\5\0\5\4"+
    "\1\u012c\23\4\34\0\4\4\1\0\6\4\5\0\1\4"+
    "\1\u012d\27\4\34\0\4\4\1\0\6\4\5\0\2\4"+
    "\1\u012e\26\4\34\0\4\4\1\0\6\4\5\0\3\4"+
    "\1\u012f\25\4\45\0\1\u0130\73\0\4\4\1\0\6\4"+
    "\5\0\5\4\1\u0131\23\4\34\0\1\4\1\u0132\2\4"+
    "\1\0\6\4\5\0\31\4\34\0\4\4\1\0\6\4"+
    "\5\0\12\4\1\u0133\16\4\34\0\4\4\1\0\1\u0134"+
    "\5\4\5\0\31\4\34\0\4\4\1\0\6\4\5\0"+
    "\1\u0135\30\4\34\0\4\4\1\0\4\4\1\u0136\1\4"+
    "\5\0\31\4\34\0\4\4\1\0\6\4\5\0\3\4"+
    "\1\u0137\25\4\34\0\4\4\1\0\6\4\5\0\5\4"+
    "\1\u0138\23\4\34\0\4\4\1\0\6\4\5\0\1\4"+
    "\1\u0139\27\4\34\0\4\4\1\0\6\4\5\0\10\4"+
    "\1\u013a\20\4\34\0\4\4\1\0\6\4\5\0\1\4"+
    "\1\u013b\27\4\34\0\4\4\1\0\6\4\5\0\10\4"+
    "\1\u013c\20\4\34\0\4\4\1\0\6\4\5\0\14\4"+
    "\1\u013d\14\4\34\0\4\4\1\0\6\4\5\0\11\4"+
    "\1\u013e\17\4\34\0\4\4\1\0\2\4\1\u013f\3\4"+
    "\5\0\31\4\67\0\1\u0140\51\0\4\4\1\0\6\4"+
    "\5\0\13\4\1\u0141\15\4\34\0\4\4\1\0\6\4"+
    "\5\0\2\4\1\u0142\26\4\34\0\4\4\1\0\6\4"+
    "\5\0\5\4\1\u0143\23\4\34\0\4\4\1\0\6\4"+
    "\5\0\5\4\1\u0144\23\4\34\0\4\4\1\0\6\4"+
    "\5\0\1\4\1\u0145\27\4\34\0\4\4\1\0\6\4"+
    "\5\0\6\4\1\u0146\22\4\34\0\4\4\1\0\6\4"+
    "\5\0\5\4\1\u0147\23\4\34\0\4\4\1\0\6\4"+
    "\5\0\1\4\1\u0148\27\4\34\0\4\4\1\0\6\4"+
    "\5\0\5\4\1\u0149\23\4\34\0\4\4\1\0\6\4"+
    "\5\0\6\4\1\u014a\22\4\34\0\4\4\1\0\6\4"+
    "\5\0\5\4\1\u014b\23\4\61\0\1\u014c\57\0\4\4"+
    "\1\0\6\4\5\0\1\u014d\30\4\34\0\4\4\1\0"+
    "\6\4\5\0\13\4\1\u014e\15\4\34\0\4\4\1\0"+
    "\6\4\5\0\1\u014f\30\4\34\0\4\4\1\0\6\4"+
    "\5\0\5\4\1\u0150\23\4\34\0\4\4\1\0\6\4"+
    "\5\0\6\4\1\u0151\22\4\34\0\4\4\1\0\6\4"+
    "\5\0\1\4\1\u0152\27\4\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17112];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\1\11\24\1\1\11\10\1\4\11"+
    "\1\1\5\11\3\1\1\0\1\1\1\11\1\1\1\11"+
    "\1\0\11\1\1\0\2\11\43\1\1\0\3\11\1\1"+
    "\2\11\1\0\3\1\1\0\6\11\1\1\2\11\1\0"+
    "\1\11\3\0\1\11\1\0\11\1\2\0\50\1\1\0"+
    "\1\11\1\1\1\0\1\11\10\1\1\0\46\1\1\0"+
    "\1\1\1\0\43\1\1\0\31\1\1\0\17\1\1\0"+
    "\13\1\1\11\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[338];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  ComplexSymbolFactory symbolFactory;
  public Lexer(java.io.Reader in, ComplexSymbolFactory sf){
  	  this(in);
      symbolFactory = sf;
  }

  private Symbol symbol(int sym) {
      return symbolFactory.newSymbol("sym", sym, new Location(yyline+1,yycolumn+1,yychar), new Location(yyline+1,yycolumn+yylength(),yychar+yylength()));
  }

  private Symbol symbol(int sym, Object val) {
      Location left = new Location(yyline+1,yycolumn+1,yychar);
      Location right= new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
      return symbolFactory.newSymbol("sym", sym, left, right,val);
  }

  private Symbol symbol(int sym, Object val,int buflength) {
      Location left = new Location(yyline+1,yycolumn+yylength()-buflength,yychar+yylength()-buflength);
      Location right= new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
      return symbolFactory.newSymbol("sym", sym, left, right,val);
  }

  /**
   * Reports an error occured in a given line.
   * @param line The bad line
   * @param msg Additional information about the error
   */
  private void reportError(int line, String msg) {
      System.err.println("Lexical error at line #" + line + ": " + msg);
      //throw new RuntimeException("Lexical error at line #" + line + ": " + msg);
  }

  public String current_lexeme(){
      int l = yyline+1;
      int c = yycolumn+1;
      return "line: " + l + ", column: " + c + ", with : '"+yytext()+"')";
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { reportError(yyline+1, "Illegal character \"" + yytext() + "\"");
          }
        case 111: break;
        case 2: 
          { return symbol(sym.INTEGER, new String(yytext()));
          }
        case 112: break;
        case 3: 
          { return symbol(sym.IDENTIFIER, new String(yytext()));
          }
        case 113: break;
        case 4: 
          { return symbol(sym.MINUSOP);
          }
        case 114: break;
        case 5: 
          { return symbol(sym.DIVOP);
          }
        case 115: break;
        case 6: 
          { return symbol(sym.STAR);
          }
        case 116: break;
        case 7: 
          { /* skip it */
          }
        case 117: break;
        case 8: 
          { return symbol(sym.LOGNEGATION);
          }
        case 118: break;
        case 9: 
          { return symbol(sym.PLUSOP);
          }
        case 119: break;
        case 10: 
          { return symbol(sym.BINNEG);
          }
        case 120: break;
        case 11: 
          { return symbol(sym.GT, new String(yytext()));
          }
        case 121: break;
        case 12: 
          { return symbol(sym.ASSIGNMENT, new String(yytext()));
          }
        case 122: break;
        case 13: 
          { return symbol(sym.LT, new String(yytext()));
          }
        case 123: break;
        case 14: 
          { return symbol(sym.MODOP);
          }
        case 124: break;
        case 15: 
          { return symbol(sym.SINGLEAND);
          }
        case 125: break;
        case 16: 
          { return symbol(sym.XOROP, new String(yytext()));
          }
        case 126: break;
        case 17: 
          { return symbol(sym.SOROP, new String(yytext()));
          }
        case 127: break;
        case 18: 
          { return symbol(sym.DOT, new String(yytext()));
          }
        case 128: break;
        case 19: 
          { return symbol(sym.SEMICOLON, new String(yytext()));
          }
        case 129: break;
        case 20: 
          { return symbol(sym.QUESTION);
          }
        case 130: break;
        case 21: 
          { return symbol(sym.LSQRBRK);
          }
        case 131: break;
        case 22: 
          { return symbol(sym.RSQRBRK);
          }
        case 132: break;
        case 23: 
          { return symbol(sym.COLON);
          }
        case 133: break;
        case 24: 
          { return symbol(sym.COMMA);
          }
        case 134: break;
        case 25: 
          { return symbol(sym.RBRK, new String(yytext()));
          }
        case 135: break;
        case 26: 
          { return symbol(sym.LBRK, new String(yytext()));
          }
        case 136: break;
        case 27: 
          { return symbol(sym.LPAR, new String(yytext()));
          }
        case 137: break;
        case 28: 
          { return symbol(sym.RPAR, new String(yytext()));
          }
        case 138: break;
        case 29: 
          { return symbol(sym.FLOATING, new String(yytext()));
          }
        case 139: break;
        case 30: 
          { return symbol(sym.AUTODECRM);
          }
        case 140: break;
        case 31: 
          { return symbol(sym.ARROW);
          }
        case 141: break;
        case 32: 
          { return symbol(sym.MINUSASSIGN, new String(yytext()));
          }
        case 142: break;
        case 33: 
          { return symbol(sym.DIVASSIGN);
          }
        case 143: break;
        case 34: 
          { return symbol(sym.MULTASSIGN);
          }
        case 144: break;
        case 35: 
          { return symbol(sym.IF, new String(yytext()));
          }
        case 145: break;
        case 36: 
          { return symbol(sym.DO, new String(yytext()));
          }
        case 146: break;
        case 37: 
          { return symbol(sym.NEQOP, new String(yytext()));
          }
        case 147: break;
        case 38: 
          { return symbol(sym.AUTOINCRM);
          }
        case 148: break;
        case 39: 
          { return symbol(sym.PLUSASSIGN, new String(yytext()));
          }
        case 149: break;
        case 40: 
          { return symbol(sym.RSHIFT);
          }
        case 150: break;
        case 41: 
          { return symbol(sym.GTE, new String(yytext()));
          }
        case 151: break;
        case 42: 
          { return symbol(sym.EQOP, new String(yytext()));
          }
        case 152: break;
        case 43: 
          { return symbol(sym.INCLUDE_LITERAL, new String(yytext()));
          }
        case 153: break;
        case 44: 
          { return symbol(sym.LTE, new String(yytext()));
          }
        case 154: break;
        case 45: 
          { return symbol(sym.LSHIFT);
          }
        case 155: break;
        case 46: 
          { return symbol(sym.MODASSIGN);
          }
        case 156: break;
        case 47: 
          { return symbol(sym.ANDASSIGN);
          }
        case 157: break;
        case 48: 
          { return symbol(sym.DOUBLEAND);
          }
        case 158: break;
        case 49: 
          { return symbol(sym.XORASSIGN);
          }
        case 159: break;
        case 50: 
          { return symbol(sym.ORASSIGN);
          }
        case 160: break;
        case 51: 
          { return symbol(sym.OROP, new String(yytext()));
          }
        case 161: break;
        case 52: 
          { return symbol(sym.DOTSTAR);
          }
        case 162: break;
        case 53: 
          { return symbol(sym.SEPPTR);
          }
        case 163: break;
        case 54: 
          { return symbol(sym.STRING_LITERAL, new String(yytext()));
          }
        case 164: break;
        case 55: 
          { return symbol(sym.ARROWSTAR);
          }
        case 165: break;
        case 56: 
          { return symbol(sym.FOR, new String(yytext()));
          }
        case 166: break;
        case 57: 
          { return symbol(sym.INT, new String(yytext()));
          }
        case 167: break;
        case 58: 
          { return symbol(sym.NEW, new String(yytext()) );
          }
        case 168: break;
        case 59: 
          { return symbol(sym.RSHIFTASSIGN, new String(yytext()));
          }
        case 169: break;
        case 60: 
          { return symbol(sym.LSHIFTASSIGN, new String(yytext()));
          }
        case 170: break;
        case 61: 
          { return symbol(sym.DOTS);
          }
        case 171: break;
        case 62: 
          { return symbol(sym.LONG, new String(yytext()));
          }
        case 172: break;
        case 63: 
          { return symbol(sym.TRUE, new String(yytext()));
          }
        case 173: break;
        case 64: 
          { return symbol(sym.THIS);
          }
        case 174: break;
        case 65: 
          { return symbol(sym.AUTO, new String(yytext()));
          }
        case 175: break;
        case 66: 
          { return symbol(sym.CASE, new String(yytext()));
          }
        case 176: break;
        case 67: 
          { return symbol(sym.CHAR, new String(yytext()));
          }
        case 177: break;
        case 68: 
          { return symbol(sym.ELSE, new String(yytext()));
          }
        case 178: break;
        case 69: 
          { return symbol(sym.NULLPTR);
          }
        case 179: break;
        case 70: 
          { return symbol(sym.GOTO, new String(yytext()));
          }
        case 180: break;
        case 71: 
          { return symbol(sym.BYTE, new String(yytext()));
          }
        case 181: break;
        case 72: 
          { return symbol(sym.BOOL, new String(yytext()));
          }
        case 182: break;
        case 73: 
          { return symbol(sym.WORD, new String(yytext()) );
          }
        case 183: break;
        case 74: 
          { return symbol(sym.VOID, new String(yytext()));
          }
        case 184: break;
        case 75: 
          { return symbol(sym.FLOAT, new String(yytext()));
          }
        case 185: break;
        case 76: 
          { return symbol(sym.FALSE, new String(yytext()));
          }
        case 186: break;
        case 77: 
          { return symbol(sym.FINAL);
          }
        case 187: break;
        case 78: 
          { return symbol(sym.USING);
          }
        case 188: break;
        case 79: 
          { return symbol(sym.UNION);
          }
        case 189: break;
        case 80: 
          { return symbol(sym.SHORT, new String(yytext()));
          }
        case 190: break;
        case 81: 
          { return symbol(sym.CLASS);
          }
        case 191: break;
        case 82: 
          { return symbol(sym.CONST);
          }
        case 192: break;
        case 83: 
          { return symbol(sym.BREAK, new String(yytext()));
          }
        case 193: break;
        case 84: 
          { return symbol(sym.WHILE, new String(yytext()));
          }
        case 194: break;
        case 85: 
          { return symbol(sym.STATIC, new String(yytext()));
          }
        case 195: break;
        case 86: 
          { return symbol(sym.STRUCT);
          }
        case 196: break;
        case 87: 
          { return symbol(sym.STRING, new String(yytext()) );
          }
        case 197: break;
        case 88: 
          { return symbol(sym.SIGNED, new String(yytext()));
          }
        case 198: break;
        case 89: 
          { return symbol(sym.SIZEOF);
          }
        case 199: break;
        case 90: 
          { return symbol(sym.SWITCH, new String(yytext()));
          }
        case 200: break;
        case 91: 
          { return symbol(sym.TYPEID);
          }
        case 201: break;
        case 92: 
          { return symbol(sym.EXTERN);
          }
        case 202: break;
        case 93: 
          { return symbol(sym.RETURN, new String(yytext()));
          }
        case 203: break;
        case 94: 
          { return symbol(sym.PUBLIC);
          }
        case 204: break;
        case 95: 
          { return symbol(sym.DOUBLE, new String(yytext()));
          }
        case 205: break;
        case 96: 
          { return symbol(sym.TYPEDEF, new String(yytext()));
          }
        case 206: break;
        case 97: 
          { return symbol(sym.ALIGNAS);
          }
        case 207: break;
        case 98: 
          { return symbol(sym.DEFAULT);
          }
        case 208: break;
        case 99: 
          { return symbol(sym.UNSIGNED, new String(yytext()));
          }
        case 209: break;
        case 100: 
          { return symbol(sym.TYPENAME);
          }
        case 210: break;
        case 101: 
          { return symbol(sym.CONTINUE, new String(yytext()));
          }
        case 211: break;
        case 102: 
          { return symbol(sym.EXPLICIT);
          }
        case 212: break;
        case 103: 
          { return symbol(sym.REGISTER, new String(yytext()));
          }
        case 213: break;
        case 104: 
          { return symbol(sym.NOEXCEPT);
          }
        case 214: break;
        case 105: 
          { return symbol(sym.DECLTYPE);
          }
        case 215: break;
        case 106: 
          { return symbol(sym.OPERATOR, new String(yytext()));
          }
        case 216: break;
        case 107: 
          { return symbol(sym.VOLATILE);
          }
        case 217: break;
        case 108: 
          { return symbol(sym.INCLUDE);
          }
        case 218: break;
        case 109: 
          { return symbol(sym.PROTECTED);
          }
        case 219: break;
        case 110: 
          { return symbol(sym.STATIC_ASSERT);
          }
        case 220: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {      return symbolFactory.newSymbol("EOF", sym.EOF, new Location(yyline+1,yycolumn+1,yychar), new Location(yyline+1,yycolumn+1,yychar+1));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
