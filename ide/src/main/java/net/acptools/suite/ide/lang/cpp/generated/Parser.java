
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package net.acptools.suite.ide.lang.cpp.generated;

import java_cup.runtime.*;
import net.acptools.suite.ide.lang.cpp.util.*;
import net.acptools.suite.ide.lang.cpp.core.*;
import java.util.ArrayList;
import java.util.List;
import java.io.BufferedReader;
import java.io.FileReader;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0185\000\002\002\004\000\002\117\003\000\002\173" +
    "\003\000\002\173\002\000\002\174\003\000\002\174\004" +
    "\000\002\175\003\000\002\175\003\000\002\175\003\000" +
    "\002\175\003\000\002\175\003\000\002\175\003\000\002" +
    "\260\004\000\002\261\003\000\002\261\003\000\002\164" +
    "\004\000\002\157\007\000\002\157\005\000\002\201\003" +
    "\000\002\201\002\000\002\262\002\000\002\012\006\000" +
    "\002\014\003\000\002\014\002\000\002\202\003\000\002" +
    "\202\004\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\206\003\000\002\206\003\000\002\206\003\000" +
    "\002\206\003\000\002\207\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\211\003\000\002\211" +
    "\003\000\002\211\003\000\002\213\003\000\002\214\003" +
    "\000\002\151\003\000\002\151\003\000\002\151\003\000" +
    "\002\151\004\000\002\210\003\000\002\210\002\000\002" +
    "\212\003\000\002\212\002\000\002\044\005\000\002\044" +
    "\005\000\002\044\006\000\002\057\005\000\002\057\004" +
    "\000\002\057\004\000\002\057\004\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\013\005\000\002\013\003\000\002\203\004\000\002" +
    "\203\006\000\002\204\006\000\002\204\004\000\002\160" +
    "\003\000\002\160\003\000\002\015\003\000\002\015\005" +
    "\000\002\031\003\000\002\031\004\000\002\156\003\000" +
    "\002\156\004\000\002\156\007\000\002\156\006\000\002" +
    "\156\005\000\002\205\003\000\002\205\004\000\002\205" +
    "\006\000\002\205\005\000\002\205\004\000\002\205\003" +
    "\000\002\120\003\000\002\120\003\000\002\165\004\000" +
    "\002\165\005\000\002\007\003\000\002\007\002\000\002" +
    "\244\003\000\002\244\005\000\002\245\003\000\002\245" +
    "\005\000\002\246\003\000\002\246\002\000\002\247\003" +
    "\000\002\247\005\000\002\250\004\000\002\250\003\000" +
    "\002\121\007\000\002\177\004\000\002\051\003\000\002" +
    "\051\002\000\002\052\003\000\002\052\005\000\002\052" +
    "\004\000\002\052\003\000\002\163\004\000\002\163\005" +
    "\000\002\114\003\000\002\114\005\000\002\216\003\000" +
    "\002\216\002\000\002\217\003\000\002\217\005\000\002" +
    "\220\004\000\002\220\006\000\002\220\004\000\002\220" +
    "\006\000\002\042\003\000\002\042\002\000\002\125\003" +
    "\000\002\125\005\000\002\054\003\000\002\004\003\000" +
    "\002\004\007\000\002\105\003\000\002\105\002\000\002" +
    "\126\003\000\002\126\005\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\127\003\000\002\127\003\000\002\102\006\000\002\102" +
    "\004\000\002\104\003\000\002\104\005\000\002\103\003" +
    "\000\002\103\002\000\002\124\003\000\002\124\005\000" +
    "\002\131\003\000\002\131\005\000\002\016\003\000\002" +
    "\016\005\000\002\017\003\000\002\017\005\000\002\020" +
    "\003\000\002\020\005\000\002\021\003\000\002\021\005" +
    "\000\002\021\005\000\002\022\003\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\023\003\000\002\023\005\000\002\023\005\000\002\046" +
    "\003\000\002\046\005\000\002\046\005\000\002\122\003" +
    "\000\002\122\005\000\002\122\005\000\002\122\005\000" +
    "\002\171\003\000\002\171\005\000\002\171\005\000\002" +
    "\063\003\000\002\063\006\000\002\055\003\000\002\055" +
    "\004\000\002\055\004\000\002\055\004\000\002\055\004" +
    "\000\002\055\006\000\002\055\007\000\002\055\006\000" +
    "\002\055\003\000\002\055\003\000\002\107\003\000\002" +
    "\107\003\000\002\107\003\000\002\107\003\000\002\107" +
    "\003\000\002\107\003\000\002\106\003\000\002\106\006" +
    "\000\002\106\006\000\002\106\005\000\002\106\006\000" +
    "\002\106\006\000\002\106\006\000\002\106\004\000\002" +
    "\106\004\000\002\106\005\000\002\106\005\000\002\106" +
    "\005\000\002\106\004\000\002\106\004\000\002\110\003" +
    "\000\002\110\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\004\000\002\235\004\000\002" +
    "\236\004\000\002\237\004\000\002\005\003\000\002\005" +
    "\003\000\002\005\005\000\002\005\003\000\002\172\005" +
    "\000\002\036\004\000\002\036\005\000\002\221\003\000" +
    "\002\221\002\000\002\222\003\000\002\222\004\000\002" +
    "\223\003\000\002\223\003\000\002\223\003\000\002\223" +
    "\003\000\002\223\003\000\002\223\003\000\002\223\003" +
    "\000\002\223\003\000\002\231\005\000\002\231\006\000" +
    "\002\231\005\000\002\233\003\000\002\233\004\000\002" +
    "\263\002\000\002\264\002\000\002\225\012\000\002\265" +
    "\002\000\002\255\005\000\002\255\002\000\002\242\003" +
    "\000\002\242\006\000\002\242\005\000\002\243\003\000" +
    "\002\243\002\000\002\226\007\000\002\226\011\000\002" +
    "\226\012\000\002\226\011\000\002\254\004\000\002\253" +
    "\004\000\002\251\003\000\002\251\003\000\002\227\004" +
    "\000\002\227\004\000\002\227\004\000\002\227\005\000" +
    "\002\227\005\000\002\100\003\000\002\100\003\000\002" +
    "\100\003\000\002\100\003\000\002\100\003\000\002\100" +
    "\003\000\002\100\003\000\002\123\003\000\002\033\003" +
    "\000\002\033\003\000\002\056\003\000\002\056\003\000" +
    "\002\045\003\000\002\116\003\000\002\155\003\000\002" +
    "\155\002\000\002\147\003\000\002\147\002\000\002\002" +
    "\003\000\002\002\002\000\002\003\004\000\002\003\006" +
    "\000\002\027\003\000\002\027\002\000\002\170\003\000" +
    "\002\170\003\000\002\146\003\000\002\146\004\000\002" +
    "\043\003\000\002\043\003\000\002\040\005\000\002\041" +
    "\004\000\002\041\004\000\002\167\003\000\002\167\004" +
    "\000\002\062\003\000\002\062\002\000\002\162\005\000" +
    "\002\162\004\000\002\162\004\000\002\162\007\000\002" +
    "\162\006\000\002\050\004\000\002\111\003\000\002\111" +
    "\002\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\153\006\000\002\153\007\000\002\152\006\000" +
    "\002\154\003\000\002\154\002\000\002\145\005\000\002" +
    "\075\004\000\002\074\003\000\002\074\003\000\002\074" +
    "\003\000\002\025\003\000\002\025\002\000\002\026\003" +
    "\000\002\026\004\000\002\166\003\000\002\166\003\000" +
    "\002\140\003\000\002\140\002\000\002\137\003\000\002" +
    "\137\003\000\002\137\003\000\002\134\006\000\002\134" +
    "\004\000\002\134\005\000\002\134\003\000\002\134\003" +
    "\000\002\135\003\000\002\136\006\000\002\112\003\000" +
    "\002\112\002\000\002\113\003\000\002\113\004\000\002" +
    "\141\007\000\002\141\003\000\002\142\004\000\002\142" +
    "\006\000\002\142\003\000\002\142\005\000\002\006\003" +
    "\000\002\006\002\000\002\072\004\000\002\066\003\000" +
    "\002\066\002\000\002\065\003\000\002\065\003\000\002" +
    "\070\006\000\002\067\005\000\002\071\003\000\002\071" +
    "\004\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\003\000\002\143\007\000\002\176\003\000" +
    "\002\144\003\000\002\144\002\000\002\234\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0237\000\106\004\030\007\015\011\031\015\035\017" +
    "\010\020\073\045\034\047\033\050\102\051\056\053\047" +
    "\060\103\063\024\075\041\107\036\115\050\121\074\122" +
    "\046\125\011\130\016\132\064\136\022\137\032\140\053" +
    "\141\012\143\070\144\023\146\006\147\062\150\026\152" +
    "\045\153\051\157\044\161\uffcf\001\ufffe\000\106\004\030" +
    "\007\015\011\031\015\035\017\010\020\073\045\034\047" +
    "\033\050\102\051\056\053\047\060\103\063\024\075\041" +
    "\107\036\115\050\121\074\122\046\125\011\130\016\132" +
    "\064\136\022\137\032\140\053\141\012\143\070\144\023" +
    "\146\006\147\062\150\026\152\045\153\051\157\044\161" +
    "\uffcf\001\uffff\000\002\001\uffd3\000\002\001\uffc2\000\002" +
    "\001\ufff9\000\002\001\ufeca\000\002\001\uffbe\000\002\001" +
    "\uffba\000\006\115\050\161\u0104\001\002\000\002\001\ufffb" +
    "\000\004\161\u0233\001\002\000\002\001\uffbf\000\046\017" +
    "\010\020\073\063\024\115\050\121\074\122\255\125\011" +
    "\130\016\132\064\136\022\137\032\140\053\141\012\143" +
    "\070\146\006\147\062\152\045\153\051\001\uffcf\000\002" +
    "\001\uffd2\000\002\001\ufe95\000\002\001\uffbd\000\002\001" +
    "\uffe0\000\002\001\uffd0\000\002\001\ufff6\000\002\001\uffdf" +
    "\000\002\001\uffa0\000\002\001\ufe80\000\004\011\u0210\001" +
    "\002\000\002\001\uffc4\000\002\001\ufeaf\000\004\043\u020c" +
    "\001\002\000\004\120\234\001\uffde\000\002\001\uffe3\000" +
    "\002\001\000\000\002\001\uffdc\000\002\001\uffe4\000\002" +
    "\001\ufff7\000\004\002\u0205\001\002\000\006\120\u0204\160" +
    "\u0203\001\002\000\010\125\u0200\136\u0201\143\u01ff\001\002" +
    "\000\004\005\uffb9\001\uffe1\000\002\001\uffdd\000\004\043" +
    "\u01fc\001\002\000\002\001\uffbb\000\002\001\uffe6\000\002" +
    "\001\uffc3\000\002\001\uffe5\000\002\001\uffb8\000\002\001" +
    "\ufead\000\002\001\uff9f\000\002\001\uffd4\000\032\004\134" +
    "\021\151\022\157\043\165\046\154\055\144\062\140\063" +
    "\153\105\141\115\050\155\146\161\142\001\002\000\002" +
    "\001\uffc1\000\002\001\uffe7\000\002\001\uffc0\000\002\001" +
    "\ufffa\000\002\001\ufff8\000\002\001\uffdb\000\002\001\uffbc" +
    "\000\002\001\ufe98\000\002\001\uffda\000\002\001\ufec9\000" +
    "\002\001\uffc5\000\004\005\126\001\002\000\006\011\031" +
    "\045\034\001\002\000\002\001\ufffd\000\004\005\106\001" +
    "\002\000\010\004\104\011\031\045\034\001\002\000\002" +
    "\001\ufeae\000\002\001\uffe2\000\002\001\ufff2\000\002\001" +
    "\ufe97\000\002\001\002\000\004\006\113\001\002\000\004" +
    "\054\111\001\002\000\004\006\112\001\002\000\002\001" +
    "\ufeb5\000\002\001\ufeb6\000\006\011\031\045\034\001\ufe9a" +
    "\000\002\001\002\000\006\052\122\053\124\001\ufeab\000" +
    "\002\001\ufeb1\000\002\001\ufeb0\000\006\052\122\053\124" +
    "\001\ufeac\000\002\001\ufea8\000\002\001\ufeaa\000\002\001" +
    "\ufea7\000\002\001\ufea9\000\002\001\ufeb2\000\004\006\131" +
    "\001\002\000\002\001\ufeb3\000\002\001\ufeb4\000\002\001" +
    "\uffd7\000\006\011\174\043\172\001\uffad\000\002\001\uff9e" +
    "\000\002\001\uffaf\000\004\055\uffd9\001\uffa1\000\030\021" +
    "\151\022\157\043\165\046\154\055\144\062\140\063\153" +
    "\105\141\115\050\155\146\161\142\001\002\000\006\011" +
    "\031\045\034\001\ufe99\000\004\161\u0136\001\002\000\004" +
    "\055\uffd6\001\uff1d\000\002\001\uff1f\000\004\055\u01f3\001" +
    "\002\000\004\055\u01f1\001\002\000\056\017\010\020\073" +
    "\047\033\050\102\051\056\063\024\115\050\121\074\122" +
    "\255\125\011\130\016\132\064\136\022\137\032\140\053" +
    "\141\012\143\070\146\006\147\062\152\045\153\051\156" +
    "\u01ee\001\uffcf\000\002\001\uff9a\000\010\005\uffed\010\u0173" +
    "\055\uffed\001\uff98\000\006\011\031\045\034\001\ufe99\000" +
    "\002\001\uff1c\000\006\115\050\161\u0104\001\002\000\010" +
    "\105\141\155\146\161\175\001\002\000\002\001\uff1e\000" +
    "\002\001\uffd8\000\006\011\031\045\034\001\ufe99\000\006" +
    "\004\u0170\054\u016f\001\002\000\004\055\u0158\001\002\000" +
    "\002\001\uffa6\000\006\021\u010a\161\u016e\001\002\000\002" +
    "\001\uffab\000\030\021\151\022\157\043\165\046\154\055" +
    "\144\062\140\063\153\105\141\115\050\155\146\161\142" +
    "\001\002\000\002\001\uff1b\000\006\011\174\043\172\001" +
    "\uffad\000\004\044\171\001\002\000\002\001\uffa7\000\074" +
    "\015\u014e\017\010\020\073\044\u014d\047\033\050\102\051" +
    "\056\053\047\060\103\063\024\075\041\107\036\115\050" +
    "\121\074\122\046\125\011\130\016\132\064\136\022\137" +
    "\032\140\053\141\012\143\070\144\023\146\006\147\062" +
    "\150\026\152\045\153\051\001\uffcf\000\002\001\uffaa\000" +
    "\114\012\214\021\231\043\221\062\227\063\024\076\215" +
    "\077\222\100\242\101\251\102\232\103\202\104\235\105" +
    "\233\110\237\111\216\115\050\117\206\120\234\121\074" +
    "\122\255\125\011\130\016\132\064\136\022\137\032\140" +
    "\053\141\012\142\177\143\070\146\006\147\062\152\045" +
    "\153\051\155\146\161\175\162\217\163\211\001\002\000" +
    "\002\001\uff1d\000\004\022\340\001\uff5e\000\002\001\ufede" +
    "\000\002\001\uff3f\000\002\001\ufee3\000\114\021\231\043" +
    "\u0146\046\u0145\062\227\063\024\076\215\077\222\100\242" +
    "\101\251\102\232\103\202\104\235\105\233\110\237\111" +
    "\216\115\050\117\206\120\234\121\074\122\255\125\011" +
    "\130\016\132\064\136\022\137\032\140\053\141\012\142" +
    "\177\143\070\146\006\147\062\152\045\153\051\155\146" +
    "\161\175\162\217\163\211\001\002\000\002\001\uff46\000" +
    "\010\062\266\071\270\072\267\001\uff49\000\002\001\ufee1" +
    "\000\002\001\ufedf\000\002\001\ufee6\000\004\021\346\001" +
    "\uff58\000\002\001\ufedb\000\004\065\342\001\uff5c\000\006" +
    "\056\350\067\351\001\uff56\000\006\011\031\045\034\001" +
    "\ufe99\000\002\001\uff30\000\002\001\ufeda\000\002\001\ufedc" +
    "\000\004\066\344\001\uff5a\000\124\017\010\020\073\021" +
    "\231\043\221\047\033\050\102\051\056\062\227\063\024" +
    "\076\215\077\222\100\242\101\251\102\232\103\202\104" +
    "\235\105\233\110\237\111\216\115\050\117\206\120\234" +
    "\121\074\122\255\125\011\130\016\132\064\136\022\137" +
    "\032\140\053\141\012\142\177\143\070\146\006\147\062" +
    "\152\045\153\051\155\146\161\175\162\217\163\211\001" +
    "\002\000\002\001\uff31\000\012\014\354\026\353\027\355" +
    "\040\356\001\uff54\000\002\001\uff2d\000\002\001\uff78\000" +
    "\002\001\ufee5\000\002\001\uff33\000\006\005\322\043\u0139" +
    "\001\002\000\002\001\uff32\000\112\021\231\043\221\062" +
    "\227\063\024\076\215\077\222\100\242\101\251\102\232" +
    "\103\202\104\235\105\233\110\237\111\216\115\050\117" +
    "\206\120\234\121\074\122\255\125\011\130\016\132\064" +
    "\136\022\137\032\140\053\141\012\142\177\143\070\146" +
    "\006\147\062\152\045\153\051\155\146\161\175\162\217" +
    "\163\211\001\002\000\004\161\u0136\001\uff2e\000\002\001" +
    "\ufed9\000\002\001\uff2f\000\002\001\ufee2\000\002\001\uff15" +
    "\000\002\001\ufee4\000\016\011\u0125\016\u0123\041\u0126\043" +
    "\u0122\101\u0124\102\u0121\001\uff3d\000\004\043\373\001\002" +
    "\000\002\001\uff13\000\006\005\322\043\366\001\002\000" +
    "\112\021\231\043\221\062\227\063\024\076\215\077\222" +
    "\100\242\101\251\102\232\103\202\104\235\105\233\110" +
    "\237\111\216\115\050\117\206\120\234\121\074\122\255" +
    "\125\011\130\016\132\064\136\022\137\032\140\053\141" +
    "\012\142\177\143\070\146\006\147\062\152\045\153\051" +
    "\155\146\161\175\162\217\163\211\001\002\000\002\001" +
    "\ufee0\000\006\076\264\077\263\001\uff4c\000\006\024\302" +
    "\064\301\001\uff77\000\112\021\231\043\221\062\227\063" +
    "\024\076\215\077\222\100\242\101\251\102\232\103\202" +
    "\104\235\105\233\110\237\111\216\115\050\117\206\120" +
    "\234\121\074\122\255\125\011\130\016\132\064\136\022" +
    "\137\032\140\053\141\012\142\177\143\070\146\006\147" +
    "\062\152\045\153\051\155\146\161\175\162\217\163\211" +
    "\001\002\000\004\012\276\001\002\000\002\001\uff16\000" +
    "\002\001\uff34\000\002\001\uffb9\000\006\057\260\070\261" +
    "\001\uff51\000\002\001\uff35\000\112\021\231\043\221\062" +
    "\227\063\024\076\215\077\222\100\242\101\251\102\232" +
    "\103\202\104\235\105\233\110\237\111\216\115\050\117" +
    "\206\120\234\121\074\122\255\125\011\130\016\132\064" +
    "\136\022\137\032\140\053\141\012\142\177\143\070\146" +
    "\006\147\062\152\045\153\051\155\146\161\175\162\217" +
    "\163\211\001\002\000\112\021\231\043\221\062\227\063" +
    "\024\076\215\077\222\100\242\101\251\102\232\103\202" +
    "\104\235\105\233\110\237\111\216\115\050\117\206\120" +
    "\234\121\074\122\255\125\011\130\016\132\064\136\022" +
    "\137\032\140\053\141\012\142\177\143\070\146\006\147" +
    "\062\152\045\153\051\155\146\161\175\162\217\163\211" +
    "\001\002\000\006\076\264\077\263\001\uff4a\000\112\021" +
    "\231\043\221\062\227\063\024\076\215\077\222\100\242" +
    "\101\251\102\232\103\202\104\235\105\233\110\237\111" +
    "\216\115\050\117\206\120\234\121\074\122\255\125\011" +
    "\130\016\132\064\136\022\137\032\140\053\141\012\142" +
    "\177\143\070\146\006\147\062\152\045\153\051\155\146" +
    "\161\175\162\217\163\211\001\002\000\112\021\231\043" +
    "\221\062\227\063\024\076\215\077\222\100\242\101\251" +
    "\102\232\103\202\104\235\105\233\110\237\111\216\115" +
    "\050\117\206\120\234\121\074\122\255\125\011\130\016" +
    "\132\064\136\022\137\032\140\053\141\012\142\177\143" +
    "\070\146\006\147\062\152\045\153\051\155\146\161\175" +
    "\162\217\163\211\001\002\000\010\062\266\071\270\072" +
    "\267\001\uff47\000\112\021\231\043\221\062\227\063\024" +
    "\076\215\077\222\100\242\101\251\102\232\103\202\104" +
    "\235\105\233\110\237\111\216\115\050\117\206\120\234" +
    "\121\074\122\255\125\011\130\016\132\064\136\022\137" +
    "\032\140\053\141\012\142\177\143\070\146\006\147\062" +
    "\152\045\153\051\155\146\161\175\162\217\163\211\001" +
    "\002\000\112\021\231\043\221\062\227\063\024\076\215" +
    "\077\222\100\242\101\251\102\232\103\202\104\235\105" +
    "\233\110\237\111\216\115\050\117\206\120\234\121\074" +
    "\122\255\125\011\130\016\132\064\136\022\137\032\140" +
    "\053\141\012\142\177\143\070\146\006\147\062\152\045" +
    "\153\051\155\146\161\175\162\217\163\211\001\002\000" +
    "\112\021\231\043\221\062\227\063\024\076\215\077\222" +
    "\100\242\101\251\102\232\103\202\104\235\105\233\110" +
    "\237\111\216\115\050\117\206\120\234\121\074\122\255" +
    "\125\011\130\016\132\064\136\022\137\032\140\053\141" +
    "\012\142\177\143\070\146\006\147\062\152\045\153\051" +
    "\155\146\161\175\162\217\163\211\001\002\000\002\001" +
    "\uff44\000\002\001\uff43\000\002\001\uff45\000\010\062\266" +
    "\071\270\072\267\001\uff48\000\006\076\264\077\263\001" +
    "\uff4b\000\006\011\031\045\034\001\ufe99\000\002\001\uffa9" +
    "\000\002\001\uff3c\000\112\021\231\043\221\062\227\063" +
    "\024\076\215\077\222\100\242\101\251\102\232\103\202" +
    "\104\235\105\233\110\237\111\216\115\050\117\206\120" +
    "\234\121\074\122\255\125\011\130\016\132\064\136\022" +
    "\137\032\140\053\141\012\142\177\143\070\146\006\147" +
    "\062\152\045\153\051\155\146\161\175\162\217\163\211" +
    "\001\002\000\112\021\231\043\221\062\227\063\024\076" +
    "\215\077\222\100\242\101\251\102\232\103\202\104\235" +
    "\105\233\110\237\111\216\115\050\117\206\120\234\121" +
    "\074\122\255\125\011\130\016\132\064\136\022\137\032" +
    "\140\053\141\012\142\177\143\070\146\006\147\062\152" +
    "\045\153\051\155\146\161\175\162\217\163\211\001\002" +
    "\000\002\001\uff73\000\004\055\335\001\002\000\034\010" +
    "\313\013\321\024\302\025\316\031\307\032\317\033\320" +
    "\034\311\035\310\036\315\037\314\061\306\064\301\001" +
    "\uff77\000\002\001\uff68\000\002\001\uff70\000\002\001\uff6c" +
    "\000\002\001\uff6d\000\114\005\322\021\231\043\221\062" +
    "\227\063\024\076\215\077\222\100\242\101\251\102\232" +
    "\103\202\104\235\105\233\110\237\111\216\115\050\117" +
    "\206\120\234\121\074\122\255\125\011\130\016\132\064" +
    "\136\022\137\032\140\053\141\012\142\177\143\070\146" +
    "\006\147\062\152\045\153\051\155\146\161\175\162\217" +
    "\163\211\001\002\000\002\001\uff71\000\002\001\uff6a\000" +
    "\002\001\uff6b\000\002\001\uff69\000\002\001\uff6f\000\002" +
    "\001\uff6e\000\002\001\uff67\000\116\005\322\006\326\021" +
    "\231\043\221\062\227\063\024\076\215\077\222\100\242" +
    "\101\251\102\232\103\202\104\235\105\233\110\237\111" +
    "\216\115\050\117\206\120\234\121\074\122\255\125\011" +
    "\130\016\132\064\136\022\137\032\140\053\141\012\142" +
    "\177\143\070\146\006\147\062\152\045\153\051\155\146" +
    "\161\175\162\217\163\211\001\002\000\002\001\uff72\000" +
    "\002\001\uff65\000\002\001\uff66\000\002\001\uff63\000\002" +
    "\001\uff62\000\004\054\331\001\uff5f\000\114\005\322\021" +
    "\231\043\221\062\227\063\024\076\215\077\222\100\242" +
    "\101\251\102\232\103\202\104\235\105\233\110\237\111" +
    "\216\115\050\117\206\120\234\121\074\122\255\125\011" +
    "\130\016\132\064\136\022\137\032\140\053\141\012\142" +
    "\177\143\070\146\006\147\062\152\045\153\051\155\146" +
    "\161\175\162\217\163\211\001\uff60\000\004\006\333\001" +
    "\002\000\002\001\uff64\000\002\001\uff61\000\112\021\231" +
    "\043\221\062\227\063\024\076\215\077\222\100\242\101" +
    "\251\102\232\103\202\104\235\105\233\110\237\111\216" +
    "\115\050\117\206\120\234\121\074\122\255\125\011\130" +
    "\016\132\064\136\022\137\032\140\053\141\012\142\177" +
    "\143\070\146\006\147\062\152\045\153\051\155\146\161" +
    "\175\162\217\163\211\001\002\000\002\001\uff76\000\004" +
    "\022\340\001\uff5d\000\112\021\231\043\221\062\227\063" +
    "\024\076\215\077\222\100\242\101\251\102\232\103\202" +
    "\104\235\105\233\110\237\111\216\115\050\117\206\120" +
    "\234\121\074\122\255\125\011\130\016\132\064\136\022" +
    "\137\032\140\053\141\012\142\177\143\070\146\006\147" +
    "\062\152\045\153\051\155\146\161\175\162\217\163\211" +
    "\001\002\000\004\065\342\001\uff5b\000\112\021\231\043" +
    "\221\062\227\063\024\076\215\077\222\100\242\101\251" +
    "\102\232\103\202\104\235\105\233\110\237\111\216\115" +
    "\050\117\206\120\234\121\074\122\255\125\011\130\016" +
    "\132\064\136\022\137\032\140\053\141\012\142\177\143" +
    "\070\146\006\147\062\152\045\153\051\155\146\161\175" +
    "\162\217\163\211\001\002\000\004\066\344\001\uff59\000" +
    "\112\021\231\043\221\062\227\063\024\076\215\077\222" +
    "\100\242\101\251\102\232\103\202\104\235\105\233\110" +
    "\237\111\216\115\050\117\206\120\234\121\074\122\255" +
    "\125\011\130\016\132\064\136\022\137\032\140\053\141" +
    "\012\142\177\143\070\146\006\147\062\152\045\153\051" +
    "\155\146\161\175\162\217\163\211\001\002\000\004\021" +
    "\346\001\uff57\000\112\021\231\043\221\062\227\063\024" +
    "\076\215\077\222\100\242\101\251\102\232\103\202\104" +
    "\235\105\233\110\237\111\216\115\050\117\206\120\234" +
    "\121\074\122\255\125\011\130\016\132\064\136\022\137" +
    "\032\140\053\141\012\142\177\143\070\146\006\147\062" +
    "\152\045\153\051\155\146\161\175\162\217\163\211\001" +
    "\002\000\006\056\350\067\351\001\uff55\000\112\021\231" +
    "\043\221\062\227\063\024\076\215\077\222\100\242\101" +
    "\251\102\232\103\202\104\235\105\233\110\237\111\216" +
    "\115\050\117\206\120\234\121\074\122\255\125\011\130" +
    "\016\132\064\136\022\137\032\140\053\141\012\142\177" +
    "\143\070\146\006\147\062\152\045\153\051\155\146\161" +
    "\175\162\217\163\211\001\002\000\112\021\231\043\221" +
    "\062\227\063\024\076\215\077\222\100\242\101\251\102" +
    "\232\103\202\104\235\105\233\110\237\111\216\115\050" +
    "\117\206\120\234\121\074\122\255\125\011\130\016\132" +
    "\064\136\022\137\032\140\053\141\012\142\177\143\070" +
    "\146\006\147\062\152\045\153\051\155\146\161\175\162" +
    "\217\163\211\001\002\000\012\014\354\026\353\027\355" +
    "\040\356\001\uff53\000\112\021\231\043\221\062\227\063" +
    "\024\076\215\077\222\100\242\101\251\102\232\103\202" +
    "\104\235\105\233\110\237\111\216\115\050\117\206\120" +
    "\234\121\074\122\255\125\011\130\016\132\064\136\022" +
    "\137\032\140\053\141\012\142\177\143\070\146\006\147" +
    "\062\152\045\153\051\155\146\161\175\162\217\163\211" +
    "\001\002\000\112\021\231\043\221\062\227\063\024\076" +
    "\215\077\222\100\242\101\251\102\232\103\202\104\235" +
    "\105\233\110\237\111\216\115\050\117\206\120\234\121" +
    "\074\122\255\125\011\130\016\132\064\136\022\137\032" +
    "\140\053\141\012\142\177\143\070\146\006\147\062\152" +
    "\045\153\051\155\146\161\175\162\217\163\211\001\002" +
    "\000\112\021\231\043\221\062\227\063\024\076\215\077" +
    "\222\100\242\101\251\102\232\103\202\104\235\105\233" +
    "\110\237\111\216\115\050\117\206\120\234\121\074\122" +
    "\255\125\011\130\016\132\064\136\022\137\032\140\053" +
    "\141\012\142\177\143\070\146\006\147\062\152\045\153" +
    "\051\155\146\161\175\162\217\163\211\001\002\000\112" +
    "\021\231\043\221\062\227\063\024\076\215\077\222\100" +
    "\242\101\251\102\232\103\202\104\235\105\233\110\237" +
    "\111\216\115\050\117\206\120\234\121\074\122\255\125" +
    "\011\130\016\132\064\136\022\137\032\140\053\141\012" +
    "\142\177\143\070\146\006\147\062\152\045\153\051\155" +
    "\146\161\175\162\217\163\211\001\002\000\006\057\260" +
    "\070\261\001\uff4e\000\006\057\260\070\261\001\uff4f\000" +
    "\006\057\260\070\261\001\uff4d\000\006\057\260\070\261" +
    "\001\uff50\000\012\014\354\026\353\027\355\040\356\001" +
    "\uff52\000\002\001\uff3a\000\002\001\uff25\000\114\005\322" +
    "\021\231\043\221\062\227\063\024\076\215\077\222\100" +
    "\242\101\251\102\232\103\202\104\235\105\233\110\237" +
    "\111\216\115\050\117\206\120\234\121\074\122\255\125" +
    "\011\130\016\132\064\136\022\137\032\140\053\141\012" +
    "\142\177\143\070\146\006\147\062\152\045\153\051\155" +
    "\146\161\175\162\217\163\211\001\ufed5\000\004\054\372" +
    "\001\ufed6\000\004\044\371\001\002\000\002\001\uff27\000" +
    "\114\005\322\021\231\043\221\062\227\063\024\076\215" +
    "\077\222\100\242\101\251\102\232\103\202\104\235\105" +
    "\233\110\237\111\216\115\050\117\206\120\234\121\074" +
    "\122\255\125\011\130\016\132\064\136\022\137\032\140" +
    "\053\141\012\142\177\143\070\146\006\147\062\152\045" +
    "\153\051\155\146\161\175\162\217\163\211\001\002\000" +
    "\054\017\010\020\073\047\033\050\102\051\056\063\024" +
    "\115\050\121\074\122\255\125\011\130\016\132\064\136" +
    "\022\137\032\140\053\141\012\143\070\146\006\147\062" +
    "\152\045\153\051\001\uffcf\000\004\044\u0120\001\002\000" +
    "\056\017\010\020\073\047\033\050\102\051\056\063\024" +
    "\115\050\121\074\122\255\125\011\130\016\132\064\136" +
    "\022\137\032\140\053\141\012\143\070\146\006\147\062" +
    "\152\045\153\051\161\uffcf\001\ufeba\000\022\021\151\022" +
    "\157\043\172\046\u0105\062\140\063\153\115\050\161\u0104" +
    "\001\uff8d\000\002\001\uff8e\000\002\001\uffd9\000\016\021" +
    "\151\022\157\062\140\063\153\115\050\161\u0104\001\ufec2" +
    "\000\004\016\u0113\001\002\000\004\043\172\001\ufec5\000" +
    "\002\001\uffd6\000\002\001\uff89\000\002\001\uff8c\000\006" +
    "\021\u010a\161\u0109\001\002\000\002\001\uff8f\000\004\055" +
    "\u0110\001\002\000\006\011\031\045\034\001\ufe99\000\006" +
    "\017\010\020\073\001\uff7b\000\006\017\010\020\073\001" +
    "\ufecc\000\002\001\uff7c\000\002\001\ufebd\000\002\001\ufecb" +
    "\000\004\055\u0111\001\002\000\002\001\uffca\000\004\016" +
    "\u0113\001\002\000\046\017\010\020\073\063\024\115\050" +
    "\121\074\122\255\125\011\130\016\132\064\136\022\137" +
    "\032\140\053\141\012\143\070\146\006\147\062\152\045" +
    "\153\051\001\uffcf\000\002\001\uff8b\000\022\021\151\022" +
    "\157\043\172\046\u0105\062\140\063\153\115\050\161\u0104" +
    "\001\uff8d\000\054\011\031\017\010\020\073\045\034\063" +
    "\024\115\050\121\074\122\255\125\011\130\016\132\064" +
    "\136\022\137\032\140\053\141\012\143\070\146\006\147" +
    "\062\152\045\153\051\161\uffcf\001\ufe99\000\002\001\ufec6" +
    "\000\002\001\ufec7\000\002\001\ufec8\000\002\001\uff8a\000" +
    "\002\001\ufec5\000\002\001\ufec4\000\002\001\ufec3\000\002" +
    "\001\ufebc\000\002\001\ufebb\000\002\001\uff36\000\002\001" +
    "\uff20\000\116\005\322\021\231\043\221\044\u0132\062\227" +
    "\063\024\076\215\077\222\100\242\101\251\102\232\103" +
    "\202\104\235\105\233\110\237\111\216\115\050\117\206" +
    "\120\234\121\074\122\255\125\011\130\016\132\064\136" +
    "\022\137\032\140\053\141\012\142\177\143\070\146\006" +
    "\147\062\152\045\153\051\155\146\161\175\162\217\163" +
    "\211\001\002\000\010\105\141\155\146\161\175\001\002" +
    "\000\002\001\uff21\000\114\005\322\021\231\043\221\062" +
    "\227\063\024\076\215\077\222\100\242\101\251\102\232" +
    "\103\202\104\235\105\233\110\237\111\216\115\050\117" +
    "\206\120\234\121\074\122\255\125\011\130\016\132\064" +
    "\136\022\137\032\140\053\141\012\142\177\143\070\146" +
    "\006\147\062\152\045\153\051\155\146\161\175\162\217" +
    "\163\211\001\ufed7\000\010\105\141\155\146\161\175\001" +
    "\002\000\002\001\uff22\000\002\001\uff24\000\006\012\u012f" +
    "\054\u012e\001\002\000\004\012\u012d\001\002\000\002\001" +
    "\ufed8\000\002\001\uff7a\000\002\001\uff2b\000\112\021\231" +
    "\043\221\062\227\063\024\076\215\077\222\100\242\101" +
    "\251\102\232\103\202\104\235\105\233\110\237\111\216" +
    "\115\050\117\206\120\234\121\074\122\255\125\011\130" +
    "\016\132\064\136\022\137\032\140\053\141\012\142\177" +
    "\143\070\146\006\147\062\152\045\153\051\155\146\161" +
    "\175\162\217\163\211\001\002\000\002\001\uff2c\000\002" +
    "\001\uff79\000\002\001\uff23\000\002\001\uff2a\000\006\044" +
    "\u0134\054\372\001\002\000\002\001\uff29\000\002\001\uff1a" +
    "\000\002\001\ufe9c\000\002\001\uff3b\000\002\001\uff26\000" +
    "\114\005\322\021\231\043\221\062\227\063\024\076\215" +
    "\077\222\100\242\101\251\102\232\103\202\104\235\105" +
    "\233\110\237\111\216\115\050\117\206\120\234\121\074" +
    "\122\255\125\011\130\016\132\064\136\022\137\032\140" +
    "\053\141\012\142\177\143\070\146\006\147\062\152\045" +
    "\153\051\155\146\161\175\162\217\163\211\001\ufed5\000" +
    "\004\044\u013b\001\002\000\002\001\uff28\000\006\044\u0142" +
    "\054\u012e\001\002\000\006\005\322\043\u0139\001\uffd4\000" +
    "\004\044\u0140\001\002\000\006\005\322\043\366\001\uffd2" +
    "\000\112\021\231\043\221\062\227\063\024\076\215\077" +
    "\222\100\242\101\251\102\232\103\202\104\235\105\233" +
    "\110\237\111\216\115\050\117\206\120\234\121\074\122" +
    "\255\125\011\130\016\132\064\136\022\137\032\140\053" +
    "\141\012\142\177\143\070\146\006\147\062\152\045\153" +
    "\051\155\146\161\175\162\217\163\211\001\002\000\002" +
    "\001\uff3e\000\002\001\uff14\000\002\001\uffa8\000\002\001" +
    "\uff39\000\004\043\u0149\001\002\000\124\017\010\020\073" +
    "\021\231\043\221\047\033\050\102\051\056\062\227\063" +
    "\024\076\215\077\222\100\242\101\251\102\232\103\202" +
    "\104\235\105\233\110\237\111\216\115\050\117\206\120" +
    "\234\121\074\122\255\125\011\130\016\132\064\136\022" +
    "\137\032\140\053\141\012\142\177\143\070\146\006\147" +
    "\062\152\045\153\051\155\146\161\175\162\217\163\211" +
    "\001\002\000\004\044\u0148\001\002\000\002\001\uff38\000" +
    "\004\161\u014a\001\002\000\004\044\u014b\001\002\000\002" +
    "\001\uff37\000\004\044\u016c\001\002\000\002\001\uff88\000" +
    "\002\001\uffde\000\030\021\151\022\157\043\u0164\046\u0163" +
    "\055\144\062\140\063\153\105\141\115\050\155\146\161" +
    "\142\001\uff8d\000\004\054\u015e\001\uff86\000\002\001\uff82" +
    "\000\114\015\u014e\017\010\020\073\021\151\022\157\043" +
    "\165\046\154\047\033\050\102\051\056\053\047\055\144" +
    "\060\103\062\140\063\u0153\075\041\105\141\107\036\115" +
    "\050\121\074\122\046\125\011\130\016\132\064\136\022" +
    "\137\032\140\053\141\012\143\070\144\023\146\006\147" +
    "\062\150\026\152\045\153\051\155\146\161\142\001\uffe9" +
    "\000\006\115\050\161\u0104\001\002\000\002\001\uffe8\000" +
    "\002\001\uff80\000\004\055\u0158\001\uffb8\000\072\015\u014e" +
    "\017\010\020\073\047\033\050\102\051\056\053\047\060" +
    "\103\063\024\075\041\107\036\115\050\121\074\122\046" +
    "\125\011\130\016\132\064\136\022\137\032\140\053\141" +
    "\012\143\070\144\023\146\006\147\062\150\026\152\045" +
    "\153\051\001\uffe9\000\004\055\u0159\001\002\000\002\001" +
    "\uffcb\000\006\021\u015b\161\u0109\001\002\000\006\011\031" +
    "\045\034\001\ufe99\000\006\017\010\020\073\001\uff7b\000" +
    "\002\001\ufebe\000\074\015\u014e\017\010\020\073\046\u015f" +
    "\047\033\050\102\051\056\053\047\060\103\063\024\075" +
    "\041\107\036\115\050\121\074\122\046\125\011\130\016" +
    "\132\064\136\022\137\032\140\053\141\012\143\070\144" +
    "\023\146\006\147\062\150\026\152\045\153\051\001\uffcf" +
    "\000\002\001\uff85\000\002\001\uff81\000\030\021\151\022" +
    "\157\043\165\046\154\055\144\062\140\063\153\105\141" +
    "\115\050\155\146\161\142\001\ufec2\000\004\010\u0169\001" +
    "\002\000\010\105\141\155\146\161\175\001\uff89\000\116" +
    "\015\u014e\017\010\020\073\021\151\022\157\043\165\044" +
    "\u014d\046\154\047\033\050\102\051\056\053\047\055\144" +
    "\060\103\062\140\063\u0153\075\041\105\141\107\036\115" +
    "\050\121\074\122\046\125\011\130\016\132\064\136\022" +
    "\137\032\140\053\141\012\143\070\144\023\146\006\147" +
    "\062\150\026\152\045\153\051\155\146\161\142\001\002" +
    "\000\004\010\u0166\001\uff7e\000\114\005\322\021\231\043" +
    "\221\062\227\063\024\076\215\077\222\100\242\101\251" +
    "\102\232\103\202\104\235\105\233\110\237\111\216\115" +
    "\050\117\206\120\234\121\074\122\255\125\011\130\016" +
    "\132\064\136\022\137\032\140\053\141\012\142\177\143" +
    "\070\146\006\147\062\152\045\153\051\155\146\161\175" +
    "\162\217\163\211\001\002\000\002\001\uff7d\000\002\001" +
    "\uffa5\000\114\005\322\021\231\043\221\062\227\063\024" +
    "\076\215\077\222\100\242\101\251\102\232\103\202\104" +
    "\235\105\233\110\237\111\216\115\050\117\206\120\234" +
    "\121\074\122\255\125\011\130\016\132\064\136\022\137" +
    "\032\140\053\141\012\142\177\143\070\146\006\147\062" +
    "\152\045\153\051\155\146\161\175\162\217\163\211\001" +
    "\002\000\002\001\uff7f\000\002\001\uffac\000\002\001\uff87" +
    "\000\002\001\uffa2\000\004\055\u0110\001\ufe9c\000\030\021" +
    "\151\022\157\043\165\046\154\055\144\062\140\063\153" +
    "\105\141\115\050\155\146\161\142\001\002\000\002\001" +
    "\uff9d\000\002\001\uff99\000\004\010\u0173\001\uff98\000\114" +
    "\005\322\021\231\043\221\062\227\063\024\076\215\077" +
    "\222\100\242\101\251\102\232\103\202\104\235\105\233" +
    "\110\237\111\216\115\050\117\206\120\234\121\074\122" +
    "\255\125\011\130\016\132\064\136\022\137\032\140\053" +
    "\141\012\142\177\143\070\146\006\147\062\152\045\153" +
    "\051\155\146\161\175\162\217\163\211\001\002\000\002" +
    "\001\uff97\000\002\001\ufebf\000\002\001\ufec0\000\006\005" +
    "\u0178\055\u017a\001\002\000\176\004\u01a6\005\u0178\006\u019e" +
    "\007\015\015\u014e\017\010\020\073\021\231\043\221\047" +
    "\033\050\102\051\056\053\047\060\103\062\227\063\024" +
    "\075\041\076\215\077\222\100\242\101\251\102\232\103" +
    "\202\104\235\105\233\107\036\110\237\111\216\115\050" +
    "\116\u01a7\117\206\120\234\121\074\122\046\123\u01a5\124" +
    "\u01aa\125\011\126\u01a8\127\u01a2\130\016\132\064\133\u01a1" +
    "\134\u019d\135\u01a9\136\022\137\032\140\053\141\012\142" +
    "\177\143\070\144\023\145\u01a3\146\006\147\062\150\026" +
    "\152\045\153\051\154\u01a0\155\146\161\u0195\162\217\163" +
    "\211\001\002\000\002\001\uffec\000\010\055\u017d\115\050" +
    "\161\u0181\001\002\000\002\001\uffb6\000\002\001\uffb1\000" +
    "\004\055\u0190\001\002\000\004\005\u0178\001\002\000\004" +
    "\055\uffd9\001\ufe9e\000\004\161\u016e\001\002\000\004\055" +
    "\uffd6\001\uffb0\000\006\005\322\043\u018b\001\002\000\006" +
    "\046\u0186\054\u0185\001\ufe7e\000\004\055\u0158\001\ufe9d\000" +
    "\010\055\u017d\115\050\161\u0181\001\002\000\002\001\ufe7f" +
    "\000\002\001\uffb5\000\004\046\u0186\001\ufe7e\000\002\001" +
    "\uffb4\000\002\001\uffb2\000\114\005\322\021\231\043\221" +
    "\062\227\063\024\076\215\077\222\100\242\101\251\102" +
    "\232\103\202\104\235\105\233\110\237\111\216\115\050" +
    "\117\206\120\234\121\074\122\255\125\011\130\016\132" +
    "\064\136\022\137\032\140\053\141\012\142\177\143\070" +
    "\146\006\147\062\152\045\153\051\155\146\161\175\162" +
    "\217\163\211\001\ufed5\000\004\044\u018d\001\002\000\002" +
    "\001\uffb3\000\002\001\ufea0\000\002\001\uffb7\000\006\115" +
    "\050\161\u0104\001\002\000\004\161\u016e\001\002\000\004" +
    "\055\uffd9\001\ufe9f\000\002\001\ufea1\000\002\001\uff08\000" +
    "\004\055\u01ea\001\uff1d\000\002\001\uff06\000\006\004\u01e9" +
    "\054\u012e\001\002\000\002\001\uff05\000\002\001\uff09\000" +
    "\176\004\u01a6\005\u0178\006\u01e7\007\015\015\u014e\017\010" +
    "\020\073\021\231\043\221\047\033\050\102\051\056\053" +
    "\047\060\103\062\227\063\024\075\041\076\215\077\222" +
    "\100\242\101\251\102\232\103\202\104\235\105\233\107" +
    "\036\110\237\111\216\115\050\116\u01a7\117\206\120\234" +
    "\121\074\122\046\123\u01a5\124\u01aa\125\011\126\u01a8\127" +
    "\u01a2\130\016\132\064\133\u01a1\134\u019d\135\u01a9\136\022" +
    "\137\032\140\053\141\012\142\177\143\070\144\023\145" +
    "\u01a3\146\006\147\062\150\026\152\045\153\051\154\u01a0" +
    "\155\146\161\u0195\162\217\163\211\001\002\000\002\001" +
    "\uff07\000\002\001\uff0a\000\004\161\u01e5\001\002\000\002" +
    "\001\uff11\000\032\004\134\021\151\022\157\043\165\046" +
    "\154\055\144\062\140\063\153\105\141\115\050\155\146" +
    "\161\142\001\002\000\004\043\u01e1\001\002\000\004\043" +
    "\u01cd\001\002\000\174\004\u01a6\005\u0178\007\015\015\u014e" +
    "\017\010\020\073\021\231\043\221\047\033\050\102\051" +
    "\056\053\047\060\103\062\227\063\024\075\041\076\215" +
    "\077\222\100\242\101\251\102\232\103\202\104\235\105" +
    "\233\107\036\110\237\111\216\115\050\116\u01a7\117\206" +
    "\120\234\121\074\122\046\123\u01a5\124\u01aa\125\011\126" +
    "\u01a8\127\u01a2\130\016\132\064\133\u01a1\134\u019d\135\u01a9" +
    "\136\022\137\032\140\053\141\012\142\177\143\070\144" +
    "\023\145\u01a3\146\006\147\062\150\026\152\045\153\051" +
    "\154\u01a0\155\146\161\u0195\162\217\163\211\001\002\000" +
    "\114\004\u01c5\021\231\043\221\062\227\063\024\076\215" +
    "\077\222\100\242\101\251\102\232\103\202\104\235\105" +
    "\233\110\237\111\216\115\050\117\206\120\234\121\074" +
    "\122\255\125\011\130\016\132\064\136\022\137\032\140" +
    "\053\141\012\142\177\143\070\146\006\147\062\152\045" +
    "\153\051\155\146\161\175\162\217\163\211\001\002\000" +
    "\002\001\uff0b\000\004\004\u01c3\001\002\000\002\001\uff00" +
    "\000\004\055\u01c1\001\002\000\004\004\u01c0\001\002\000" +
    "\004\043\u01b0\001\002\000\112\021\231\043\221\062\227" +
    "\063\024\076\215\077\222\100\242\101\251\102\232\103" +
    "\202\104\235\105\233\110\237\111\216\115\050\117\206" +
    "\120\234\121\074\122\255\125\011\130\016\132\064\136" +
    "\022\137\032\140\053\141\012\142\177\143\070\146\006" +
    "\147\062\152\045\153\051\155\146\161\175\162\217\163" +
    "\211\001\002\000\002\001\uff0d\000\002\001\uff04\000\004" +
    "\055\u01ae\001\002\000\174\004\u01a6\005\u0178\007\015\015" +
    "\u014e\017\010\020\073\021\231\043\221\047\033\050\102" +
    "\051\056\053\047\060\103\062\227\063\024\075\041\076" +
    "\215\077\222\100\242\101\251\102\232\103\202\104\235" +
    "\105\233\107\036\110\237\111\216\115\050\116\u01a7\117" +
    "\206\120\234\121\074\122\046\123\u01a5\124\u01aa\125\011" +
    "\126\u01a8\127\u01a2\130\016\132\064\133\u01a1\134\u019d\135" +
    "\u01a9\136\022\137\032\140\053\141\012\142\177\143\070" +
    "\144\023\145\u01a3\146\006\147\062\150\026\152\045\153" +
    "\051\154\u01a0\155\146\161\u0195\162\217\163\211\001\002" +
    "\000\002\001\uff02\000\142\015\u014e\017\010\020\073\021" +
    "\231\043\221\047\033\050\102\051\056\053\047\060\103" +
    "\062\227\063\024\075\041\076\215\077\222\100\242\101" +
    "\251\102\232\103\202\104\235\105\233\107\036\110\237" +
    "\111\216\115\050\117\206\120\234\121\074\122\046\125" +
    "\011\130\016\132\064\136\022\137\032\140\053\141\012" +
    "\142\177\143\070\144\023\146\006\147\062\150\026\152" +
    "\045\153\051\155\146\161\175\162\217\163\211\001\002" +
    "\000\004\054\u012e\001\ufef8\000\030\021\151\022\157\043" +
    "\165\046\154\055\144\062\140\063\153\105\141\115\050" +
    "\155\146\161\142\001\002\000\004\044\u01b4\001\002\000" +
    "\002\001\ufefe\000\174\004\u01a6\005\u0178\007\015\015\u014e" +
    "\017\010\020\073\021\231\043\221\047\033\050\102\051" +
    "\056\053\047\060\103\062\227\063\024\075\041\076\215" +
    "\077\222\100\242\101\251\102\232\103\202\104\235\105" +
    "\233\107\036\110\237\111\216\115\050\116\u01a7\117\206" +
    "\120\234\121\074\122\046\123\u01a5\124\u01aa\125\011\126" +
    "\u01a8\127\u01a2\130\016\132\064\133\u01a1\134\u019d\135\u01a9" +
    "\136\022\137\032\140\053\141\012\142\177\143\070\144" +
    "\023\145\u01a3\146\006\147\062\150\026\152\045\153\051" +
    "\154\u01a0\155\146\161\u0195\162\217\163\211\001\002\000" +
    "\002\001\ufefd\000\004\131\ufefb\001\ufef9\000\004\131\u01ba" +
    "\001\002\000\002\001\ufefc\000\174\004\u01a6\005\u0178\007" +
    "\015\015\u014e\017\010\020\073\021\231\043\221\047\033" +
    "\050\102\051\056\053\047\060\103\062\227\063\024\075" +
    "\041\076\215\077\222\100\242\101\251\102\232\103\202" +
    "\104\235\105\233\107\036\110\237\111\216\115\050\116" +
    "\u01a7\117\206\120\234\121\074\122\046\123\u01a5\124\u01aa" +
    "\125\011\126\u01a8\127\u01a2\130\016\132\064\133\u01a1\134" +
    "\u019d\135\u01a9\136\022\137\032\140\053\141\012\142\177" +
    "\143\070\144\023\145\u01a3\146\006\147\062\150\026\152" +
    "\045\153\051\154\u01a0\155\146\161\u0195\162\217\163\211" +
    "\001\002\000\002\001\ufefa\000\006\005\322\010\u01bd\001" +
    "\002\000\114\005\322\021\231\043\221\062\227\063\024" +
    "\076\215\077\222\100\242\101\251\102\232\103\202\104" +
    "\235\105\233\110\237\111\216\115\050\117\206\120\234" +
    "\121\074\122\255\125\011\130\016\132\064\136\022\137" +
    "\032\140\053\141\012\142\177\143\070\146\006\147\062" +
    "\152\045\153\051\155\146\161\175\162\217\163\211\001" +
    "\002\000\002\001\ufef6\000\002\001\ufef7\000\002\001\ufeea" +
    "\000\174\004\u01a6\005\u0178\007\015\015\u014e\017\010\020" +
    "\073\021\231\043\221\047\033\050\102\051\056\053\047" +
    "\060\103\062\227\063\024\075\041\076\215\077\222\100" +
    "\242\101\251\102\232\103\202\104\235\105\233\107\036" +
    "\110\237\111\216\115\050\116\u01a7\117\206\120\234\121" +
    "\074\122\046\123\u01a5\124\u01aa\125\011\126\u01a8\127\u01a2" +
    "\130\016\132\064\133\u01a1\134\u019d\135\u01a9\136\022\137" +
    "\032\140\053\141\012\142\177\143\070\144\023\145\u01a3" +
    "\146\006\147\062\150\026\152\045\153\051\154\u01a0\155" +
    "\146\161\u0195\162\217\163\211\001\002\000\002\001\uff01" +
    "\000\002\001\ufeeb\000\006\004\u01c6\054\u012e\001\002\000" +
    "\002\001\ufee9\000\002\001\ufee8\000\004\154\u01c8\001\002" +
    "\000\004\043\u01c9\001\002\000\112\021\231\043\221\062" +
    "\227\063\024\076\215\077\222\100\242\101\251\102\232" +
    "\103\202\104\235\105\233\110\237\111\216\115\050\117" +
    "\206\120\234\121\074\122\255\125\011\130\016\132\064" +
    "\136\022\137\032\140\053\141\012\142\177\143\070\146" +
    "\006\147\062\152\045\153\051\155\146\161\175\162\217" +
    "\163\211\001\002\000\006\044\u01cb\054\u012e\001\002\000" +
    "\004\004\u01cc\001\002\000\002\001\ufef2\000\144\004\u01a6" +
    "\015\u014e\017\010\020\073\021\231\043\221\047\033\050" +
    "\102\051\056\053\047\060\103\062\227\063\024\075\041" +
    "\076\215\077\222\100\242\101\251\102\232\103\202\104" +
    "\235\105\233\107\036\110\237\111\216\115\050\117\206" +
    "\120\234\121\074\122\046\125\011\130\016\132\064\136" +
    "\022\137\032\140\053\141\012\142\177\143\070\144\023" +
    "\146\006\147\062\150\026\152\045\153\051\155\146\161" +
    "\175\162\217\163\211\001\002\000\030\021\151\022\157" +
    "\043\165\046\154\055\144\062\140\063\153\105\141\115" +
    "\050\155\146\161\142\001\002\000\002\001\ufeed\000\004" +
    "\055\u01da\001\002\000\002\001\ufeec\000\054\017\010\020" +
    "\073\047\033\050\102\051\056\063\024\115\050\121\074" +
    "\122\255\125\011\130\016\132\064\136\022\137\032\140" +
    "\053\141\012\143\070\146\006\147\062\152\045\153\051" +
    "\001\uffe6\000\142\015\u014e\017\010\020\073\021\231\043" +
    "\221\047\033\050\102\051\056\053\047\060\103\062\227" +
    "\063\024\075\041\076\215\077\222\100\242\101\251\102" +
    "\232\103\202\104\235\105\233\107\036\110\237\111\216" +
    "\115\050\117\206\120\234\121\074\122\046\125\011\130" +
    "\016\132\064\136\022\137\032\140\053\141\012\142\177" +
    "\143\070\144\023\146\006\147\062\150\026\152\045\153" +
    "\051\155\146\161\175\162\217\163\211\001\ufef4\000\002" +
    "\001\ufef5\000\004\004\u01d6\001\002\000\114\004\u01a6\021" +
    "\231\043\221\062\227\063\024\076\215\077\222\100\242" +
    "\101\251\102\232\103\202\104\235\105\233\110\237\111" +
    "\216\115\050\117\206\120\234\121\074\122\255\125\011" +
    "\130\016\132\064\136\022\137\032\140\053\141\012\142" +
    "\177\143\070\146\006\147\062\152\045\153\051\155\146" +
    "\161\175\162\217\163\211\001\002\000\004\044\u01d8\001" +
    "\002\000\174\004\u01a6\005\u0178\007\015\015\u014e\017\010" +
    "\020\073\021\231\043\221\047\033\050\102\051\056\053" +
    "\047\060\103\062\227\063\024\075\041\076\215\077\222" +
    "\100\242\101\251\102\232\103\202\104\235\105\233\107" +
    "\036\110\237\111\216\115\050\116\u01a7\117\206\120\234" +
    "\121\074\122\046\123\u01a5\124\u01aa\125\011\126\u01a8\127" +
    "\u01a2\130\016\132\064\133\u01a1\134\u019d\135\u01a9\136\022" +
    "\137\032\140\053\141\012\142\177\143\070\144\023\145" +
    "\u01a3\146\006\147\062\150\026\152\045\153\051\154\u01a0" +
    "\155\146\161\u0195\162\217\163\211\001\002\000\002\001" +
    "\ufef1\000\112\021\231\043\221\062\227\063\024\076\215" +
    "\077\222\100\242\101\251\102\232\103\202\104\235\105" +
    "\233\110\237\111\216\115\050\117\206\120\234\121\074" +
    "\122\255\125\011\130\016\132\064\136\022\137\032\140" +
    "\053\141\012\142\177\143\070\146\006\147\062\152\045" +
    "\153\051\155\146\161\175\162\217\163\211\001\002\000" +
    "\006\005\322\054\u012e\001\002\000\004\044\u01dd\001\002" +
    "\000\174\004\u01a6\005\u0178\007\015\015\u014e\017\010\020" +
    "\073\021\231\043\221\047\033\050\102\051\056\053\047" +
    "\060\103\062\227\063\024\075\041\076\215\077\222\100" +
    "\242\101\251\102\232\103\202\104\235\105\233\107\036" +
    "\110\237\111\216\115\050\116\u01a7\117\206\120\234\121" +
    "\074\122\046\123\u01a5\124\u01aa\125\011\126\u01a8\127\u01a2" +
    "\130\016\132\064\133\u01a1\134\u019d\135\u01a9\136\022\137" +
    "\032\140\053\141\012\142\177\143\070\144\023\145\u01a3" +
    "\146\006\147\062\150\026\152\045\153\051\154\u01a0\155" +
    "\146\161\u0195\162\217\163\211\001\002\000\002\001\ufef0" +
    "\000\002\001\ufeee\000\002\001\ufeef\000\142\015\u014e\017" +
    "\010\020\073\021\231\043\221\047\033\050\102\051\056" +
    "\053\047\060\103\062\227\063\024\075\041\076\215\077" +
    "\222\100\242\101\251\102\232\103\202\104\235\105\233" +
    "\107\036\110\237\111\216\115\050\117\206\120\234\121" +
    "\074\122\046\125\011\130\016\132\064\136\022\137\032" +
    "\140\053\141\012\142\177\143\070\144\023\146\006\147" +
    "\062\150\026\152\045\153\051\155\146\161\175\162\217" +
    "\163\211\001\002\000\004\044\u01e3\001\002\000\174\004" +
    "\u01a6\005\u0178\007\015\015\u014e\017\010\020\073\021\231" +
    "\043\221\047\033\050\102\051\056\053\047\060\103\062" +
    "\227\063\024\075\041\076\215\077\222\100\242\101\251" +
    "\102\232\103\202\104\235\105\233\107\036\110\237\111" +
    "\216\115\050\116\u01a7\117\206\120\234\121\074\122\046" +
    "\123\u01a5\124\u01aa\125\011\126\u01a8\127\u01a2\130\016\132" +
    "\064\133\u01a1\134\u019d\135\u01a9\136\022\137\032\140\053" +
    "\141\012\142\177\143\070\144\023\145\u01a3\146\006\147" +
    "\062\150\026\152\045\153\051\154\u01a0\155\146\161\u0195" +
    "\162\217\163\211\001\002\000\002\001\ufef3\000\004\004" +
    "\u01e6\001\002\000\002\001\ufee7\000\002\001\uff10\000\002" +
    "\001\uff0c\000\002\001\ufeff\000\174\004\u01a6\005\u0178\007" +
    "\015\015\u014e\017\010\020\073\021\231\043\221\047\033" +
    "\050\102\051\056\053\047\060\103\062\227\063\024\075" +
    "\041\076\215\077\222\100\242\101\251\102\232\103\202" +
    "\104\235\105\233\107\036\110\237\111\216\115\050\116" +
    "\u01a7\117\206\120\234\121\074\122\046\123\u01a5\124\u01aa" +
    "\125\011\126\u01a8\127\u01a2\130\016\132\064\133\u01a1\134" +
    "\u019d\135\u01a9\136\022\137\032\140\053\141\012\142\177" +
    "\143\070\144\023\145\u01a3\146\006\147\062\150\026\152" +
    "\045\153\051\154\u01a0\155\146\161\u0195\162\217\163\211" +
    "\001\002\000\002\001\uff03\000\002\001\uff19\000\002\001" +
    "\uff18\000\002\001\ufe7d\000\002\001\002\000\002\001\uff17" +
    "\000\004\055\u01f2\001\002\000\002\001\uffcc\000\006\115" +
    "\050\161\u0104\001\002\000\004\161\u0136\001\002\000\004" +
    "\055\uffd9\001\uffa3\000\004\161\u0109\001\002\000\002\001" +
    "\uffa4\000\006\017\010\020\073\001\uff7b\000\002\001\ufec1" +
    "\000\004\016\u0113\001\uffaa\000\002\001\uffae\000\112\021" +
    "\231\043\221\062\227\063\024\076\215\077\222\100\242" +
    "\101\251\102\232\103\202\104\235\105\233\110\237\111" +
    "\216\115\050\117\206\120\234\121\074\122\255\125\011" +
    "\130\016\132\064\136\022\137\032\140\053\141\012\142" +
    "\177\143\070\146\006\147\062\152\045\153\051\155\146" +
    "\161\175\162\217\163\211\001\002\000\006\044\u01fe\054" +
    "\u012e\001\002\000\002\001\ufe9b\000\002\001\uffc6\000\002" +
    "\001\uffc8\000\002\001\uffc7\000\002\001\ufff5\000\002\001" +
    "\ufff4\000\002\001\ufff3\000\002\001\001\000\106\004\030" +
    "\005\u0207\007\015\011\031\015\035\017\010\020\073\045" +
    "\034\047\033\050\102\051\056\053\047\060\103\063\024" +
    "\075\041\107\036\115\050\121\074\122\046\125\011\130" +
    "\016\132\064\136\022\137\032\140\053\141\012\143\070" +
    "\144\023\146\006\147\062\150\026\152\045\153\051\157" +
    "\044\001\uffcf\000\074\015\u014e\017\010\020\073\047\033" +
    "\050\102\051\056\053\047\060\103\063\024\075\041\107" +
    "\036\115\050\121\074\122\046\125\011\130\016\132\064" +
    "\136\022\137\032\140\053\141\012\143\070\144\023\146" +
    "\006\147\062\150\026\152\045\153\051\161\uffcf\001\uffea" +
    "\000\002\001\ufff0\000\004\006\u020b\001\002\000\002\001" +
    "\uffeb\000\002\001\ufff1\000\054\017\010\020\073\047\033" +
    "\050\102\051\056\063\024\115\050\121\074\122\255\125" +
    "\011\130\016\132\064\136\022\137\032\140\053\141\012" +
    "\143\070\146\006\147\062\152\045\153\051\001\uffcf\000" +
    "\004\046\u0186\001\ufe7e\000\004\044\u020f\001\002\000\002" +
    "\001\ufe81\000\004\161\u0213\001\ufe8f\000\004\043\u0222\001" +
    "\ufe8c\000\002\001\ufe8a\000\004\055\u021e\001\ufe8b\000\004" +
    "\046\u021d\001\ufe90\000\006\012\u0218\054\u0217\001\002\000" +
    "\002\001\ufe92\000\004\161\u0213\001\ufe8f\000\004\012\u0219" +
    "\001\002\000\002\001\ufe96\000\004\046\u021c\001\ufe90\000" +
    "\002\001\ufe91\000\002\001\ufe93\000\002\001\ufe94\000\004" +
    "\055\u021f\001\002\000\004\161\u0220\001\002\000\002\001" +
    "\ufe89\000\002\001\ufe8e\000\010\005\u0225\011\u0229\043\u0227" +
    "\001\002\000\002\001\ufe8d\000\012\005\u0225\011\u0229\043" +
    "\u0227\044\u0231\001\002\000\010\005\u0225\011\u0229\043\u0227" +
    "\001\002\000\002\001\ufe82\000\010\005\u0225\011\u0229\043" +
    "\u0227\001\002\000\002\001\ufe87\000\010\005\u0225\011\u0229" +
    "\043\u0227\001\002\000\012\005\u0225\011\u0229\012\u022b\043" +
    "\u0227\001\002\000\002\001\ufe84\000\002\001\ufe86\000\012" +
    "\005\u0225\011\u0229\043\u0227\044\u022e\001\002\000\002\001" +
    "\ufe85\000\012\005\u0225\006\u0230\011\u0229\043\u0227\001\002" +
    "\000\002\001\ufe83\000\002\001\ufe88\000\002\001\uffd1\000" +
    "\004\010\u0234\001\002\000\054\017\010\020\073\047\033" +
    "\050\102\051\056\063\024\115\050\121\074\122\255\125" +
    "\011\130\016\132\064\136\022\137\032\140\053\141\012" +
    "\143\070\146\006\147\062\152\045\153\051\001\uffcf\000" +
    "\004\004\u0236\001\002\000\002\001\uff90\000\004\161\u0104" +
    "\001\002\000\002\001\uffc9\000\002\001\ufffc" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0237\000\100\012\064\037\060\043\016\053\051\057" +
    "\057\060\004\061\017\074\075\077\077\113\100\117\042" +
    "\120\013\121\056\136\054\141\070\143\020\145\074\151" +
    "\037\152\066\153\071\157\006\164\041\165\026\173\036" +
    "\174\003\175\076\176\065\206\062\207\053\210\012\260" +
    "\024\001\001\000\072\012\064\037\060\043\016\053\051" +
    "\057\057\060\004\061\017\074\075\077\077\113\100\120" +
    "\013\121\056\136\054\141\070\143\020\145\074\151\037" +
    "\152\066\153\071\157\006\164\041\165\026\175\u0238\176" +
    "\065\206\062\207\053\210\012\260\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\044\u01f5" +
    "\135\377\136\160\211\144\212\u0236\213\155\214\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\043\016\057\057\060\004\061\017\136\054\151" +
    "\u0231\210\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\116\u0205\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\261\u0201" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\015\147\031\134\044\162\047\142\110\161\133\154\135" +
    "\135\136\160\156\132\162\136\205\163\211\144\213\155" +
    "\214\131\235\151\236\165\244\157\245\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\112\114\113" +
    "\113\141\070\143\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\141\104\143\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\107\115\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\141\104\143\020\001\001\000\006\075" +
    "\116\076\115\001\001\000\010\025\117\026\120\166\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\166" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\073\127\154\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\163\u01f9\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\031\u016a" +
    "\044\162\047\142\110\161\133\154\135\135\136\160\156" +
    "\166\162\136\205\163\211\144\213\155\214\131\235\151" +
    "\236\165\001\001\000\012\112\u01f7\113\113\141\070\143" +
    "\020\001\001\000\004\135\u0134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\043\016\050\u01ee\053\374\057\057\060\004\061\017" +
    "\074\075\077\077\136\054\145\074\151\037\152\066\153" +
    "\071\210\012\234\u01eb\237\u01ec\001\001\000\002\001\001" +
    "\000\004\262\u0176\001\001\000\012\112\u0175\113\113\141" +
    "\070\143\020\001\001\000\002\001\001\000\016\044\u0159" +
    "\135\377\136\160\211\144\213\155\214\131\001\001\000" +
    "\014\047\142\110\u0167\133\154\235\151\236\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\112\u0174\113" +
    "\113\141\070\143\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\135\u016c\001\001\000" +
    "\002\001\001\000\040\031\167\044\162\047\142\110\161" +
    "\133\154\135\135\136\160\156\166\162\136\205\163\211" +
    "\144\213\155\214\131\235\151\236\165\001\001\000\002" +
    "\001\001\000\004\163\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\037\u0151\043\016\053\051\057\057" +
    "\060\004\061\017\074\075\077\077\114\u014b\136\054\145" +
    "\074\151\037\152\066\153\071\202\u014e\206\062\207\053" +
    "\210\012\217\u014f\220\u0150\001\001\000\002\001\001\000" +
    "\112\004\224\005\223\016\211\017\217\020\207\021\212" +
    "\022\222\023\255\030\253\032\245\033\237\045\204\046" +
    "\246\047\142\054\251\055\177\056\235\057\227\061\243" +
    "\063\202\064\225\100\252\106\240\107\244\110\242\116" +
    "\200\122\203\123\206\124\247\131\175\132\256\133\154" +
    "\136\054\210\012\235\151\236\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\005\223\030\253\032\245\033" +
    "\237\045\204\047\142\055\u0143\056\235\057\227\061\243" +
    "\064\225\100\252\106\240\107\244\110\242\116\200\123" +
    "\206\132\256\133\154\136\054\210\012\235\151\236\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\112\u0142\113\113\141\070\143\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\142\004\302\005\223\016\211\017\217\020\207" +
    "\021\212\022\222\023\255\030\253\032\245\033\237\043" +
    "\016\045\204\046\246\047\142\050\375\053\374\055\177" +
    "\056\235\057\u013c\060\004\061\u013e\063\202\064\225\074" +
    "\075\077\077\100\252\106\240\107\244\110\242\116\200" +
    "\122\203\123\206\124\304\125\u013b\126\u012b\131\175\132" +
    "\256\133\154\136\054\145\074\151\037\152\066\153\071" +
    "\177\u013d\210\012\235\151\236\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\102\u0137\001" +
    "\001\000\002\001\001\000\062\005\223\030\253\032\245" +
    "\033\237\045\204\047\142\055\177\056\235\057\227\061" +
    "\243\063\u0136\064\225\100\252\106\240\107\244\110\242" +
    "\116\200\123\206\132\256\133\154\136\054\210\012\235" +
    "\151\236\165\001\001\000\004\135\u0134\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\102\364\001\001\000\062\005" +
    "\223\030\253\032\245\033\237\045\204\047\142\055\177" +
    "\056\235\057\227\061\243\063\363\064\225\100\252\106" +
    "\240\107\244\110\242\116\200\123\206\132\256\133\154" +
    "\136\054\210\012\235\151\236\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\005\223" +
    "\030\253\032\245\033\237\045\204\047\142\055\177\056" +
    "\235\057\227\061\243\063\277\064\225\100\252\106\240" +
    "\107\244\110\242\116\200\123\206\132\256\133\154\136" +
    "\054\210\012\235\151\236\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\066\005\223\030\253" +
    "\032\245\033\237\045\204\046\274\047\142\055\177\056" +
    "\235\057\227\061\243\063\202\064\225\100\252\106\240" +
    "\107\244\110\242\116\200\122\203\123\206\132\256\133" +
    "\154\136\054\210\012\235\151\236\165\001\001\000\066" +
    "\005\223\030\253\032\245\033\237\045\204\046\261\047" +
    "\142\055\177\056\235\057\227\061\243\063\202\064\225" +
    "\100\252\106\240\107\244\110\242\116\200\122\203\123" +
    "\206\132\256\133\154\136\054\210\012\235\151\236\165" +
    "\001\001\000\002\001\001\000\064\005\223\030\253\032" +
    "\245\033\237\045\204\047\142\055\177\056\235\057\227" +
    "\061\243\063\202\064\225\100\252\106\240\107\244\110" +
    "\242\116\200\122\273\123\206\132\256\133\154\136\054" +
    "\210\012\235\151\236\165\001\001\000\064\005\223\030" +
    "\253\032\245\033\237\045\204\047\142\055\177\056\235" +
    "\057\227\061\243\063\202\064\225\100\252\106\240\107" +
    "\244\110\242\116\200\122\264\123\206\132\256\133\154" +
    "\136\054\210\012\235\151\236\165\001\001\000\002\001" +
    "\001\000\062\005\223\030\253\032\245\033\237\045\204" +
    "\047\142\055\177\056\235\057\227\061\243\063\272\064" +
    "\225\100\252\106\240\107\244\110\242\116\200\123\206" +
    "\132\256\133\154\136\054\210\012\235\151\236\165\001" +
    "\001\000\062\005\223\030\253\032\245\033\237\045\204" +
    "\047\142\055\177\056\235\057\227\061\243\063\271\064" +
    "\225\100\252\106\240\107\244\110\242\116\200\123\206" +
    "\132\256\133\154\136\054\210\012\235\151\236\165\001" +
    "\001\000\062\005\223\030\253\032\245\033\237\045\204" +
    "\047\142\055\177\056\235\057\227\061\243\063\270\064" +
    "\225\100\252\106\240\107\244\110\242\116\200\123\206" +
    "\132\256\133\154\136\054\210\012\235\151\236\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\112\276\113" +
    "\113\141\070\143\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\104\005\223\016\211\017\217\020\207\021" +
    "\212\022\222\023\255\030\253\032\245\033\237\045\204" +
    "\046\246\047\142\055\177\056\235\057\227\061\243\063" +
    "\202\064\225\100\252\106\240\107\244\110\242\116\200" +
    "\122\203\123\206\131\336\132\256\133\154\136\054\210" +
    "\012\235\151\236\165\001\001\000\112\004\302\005\223" +
    "\016\211\017\217\020\207\021\212\022\222\023\255\030" +
    "\253\032\245\033\237\045\204\046\246\047\142\055\177" +
    "\056\235\057\227\061\243\063\202\064\225\100\252\106" +
    "\240\107\244\110\242\116\200\122\203\123\206\124\304" +
    "\126\303\131\175\132\256\133\154\136\054\210\012\235" +
    "\151\236\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\311\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\116\004\302" +
    "\005\223\016\211\017\217\020\207\021\212\022\222\023" +
    "\255\030\253\032\245\033\237\045\204\046\246\047\142" +
    "\055\177\056\235\057\227\061\243\063\202\064\225\100" +
    "\252\102\323\106\240\107\244\110\242\116\200\122\203" +
    "\123\206\124\304\126\324\127\322\131\175\132\256\133" +
    "\154\136\054\210\012\235\151\236\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\120\004\302\005\223\016\211\017\217\020\207\021" +
    "\212\022\222\023\255\030\253\032\245\033\237\045\204" +
    "\046\246\047\142\055\177\056\235\057\227\061\243\063" +
    "\202\064\225\100\252\102\323\104\327\106\240\107\244" +
    "\110\242\116\200\122\203\123\206\124\304\126\324\127" +
    "\326\131\175\132\256\133\154\136\054\210\012\235\151" +
    "\236\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\103\331\001\001\000\116\004\302\005\223\016\211\017" +
    "\217\020\207\021\212\022\222\023\255\030\253\032\245" +
    "\033\237\045\204\046\246\047\142\055\177\056\235\057" +
    "\227\061\243\063\202\064\225\100\252\102\323\106\240" +
    "\107\244\110\242\116\200\122\203\123\206\124\304\126" +
    "\324\127\333\131\175\132\256\133\154\136\054\210\012" +
    "\235\151\236\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\112\004\302\005\223\016\211" +
    "\017\217\020\207\021\212\022\222\023\255\030\253\032" +
    "\245\033\237\045\204\046\246\047\142\055\177\056\235" +
    "\057\227\061\243\063\202\064\225\100\252\106\240\107" +
    "\244\110\242\116\200\122\203\123\206\124\304\126\335" +
    "\131\175\132\256\133\154\136\054\210\012\235\151\236" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\102" +
    "\005\223\016\340\017\217\020\207\021\212\022\222\023" +
    "\255\030\253\032\245\033\237\045\204\046\246\047\142" +
    "\055\177\056\235\057\227\061\243\063\202\064\225\100" +
    "\252\106\240\107\244\110\242\116\200\122\203\123\206" +
    "\132\256\133\154\136\054\210\012\235\151\236\165\001" +
    "\001\000\002\001\001\000\100\005\223\017\342\020\207" +
    "\021\212\022\222\023\255\030\253\032\245\033\237\045" +
    "\204\046\246\047\142\055\177\056\235\057\227\061\243" +
    "\063\202\064\225\100\252\106\240\107\244\110\242\116" +
    "\200\122\203\123\206\132\256\133\154\136\054\210\012" +
    "\235\151\236\165\001\001\000\002\001\001\000\076\005" +
    "\223\020\344\021\212\022\222\023\255\030\253\032\245" +
    "\033\237\045\204\046\246\047\142\055\177\056\235\057" +
    "\227\061\243\063\202\064\225\100\252\106\240\107\244" +
    "\110\242\116\200\122\203\123\206\132\256\133\154\136" +
    "\054\210\012\235\151\236\165\001\001\000\002\001\001" +
    "\000\074\005\223\021\346\022\222\023\255\030\253\032" +
    "\245\033\237\045\204\046\246\047\142\055\177\056\235" +
    "\057\227\061\243\063\202\064\225\100\252\106\240\107" +
    "\244\110\242\116\200\122\203\123\206\132\256\133\154" +
    "\136\054\210\012\235\151\236\165\001\001\000\002\001" +
    "\001\000\072\005\223\022\362\023\255\030\253\032\245" +
    "\033\237\045\204\046\246\047\142\055\177\056\235\057" +
    "\227\061\243\063\202\064\225\100\252\106\240\107\244" +
    "\110\242\116\200\122\203\123\206\132\256\133\154\136" +
    "\054\210\012\235\151\236\165\001\001\000\072\005\223" +
    "\022\351\023\255\030\253\032\245\033\237\045\204\046" +
    "\246\047\142\055\177\056\235\057\227\061\243\063\202" +
    "\064\225\100\252\106\240\107\244\110\242\116\200\122" +
    "\203\123\206\132\256\133\154\136\054\210\012\235\151" +
    "\236\165\001\001\000\002\001\001\000\070\005\223\023" +
    "\361\030\253\032\245\033\237\045\204\046\246\047\142" +
    "\055\177\056\235\057\227\061\243\063\202\064\225\100" +
    "\252\106\240\107\244\110\242\116\200\122\203\123\206" +
    "\132\256\133\154\136\054\210\012\235\151\236\165\001" +
    "\001\000\070\005\223\023\360\030\253\032\245\033\237" +
    "\045\204\046\246\047\142\055\177\056\235\057\227\061" +
    "\243\063\202\064\225\100\252\106\240\107\244\110\242" +
    "\116\200\122\203\123\206\132\256\133\154\136\054\210" +
    "\012\235\151\236\165\001\001\000\070\005\223\023\357" +
    "\030\253\032\245\033\237\045\204\046\246\047\142\055" +
    "\177\056\235\057\227\061\243\063\202\064\225\100\252" +
    "\106\240\107\244\110\242\116\200\122\203\123\206\132" +
    "\256\133\154\136\054\210\012\235\151\236\165\001\001" +
    "\000\070\005\223\023\356\030\253\032\245\033\237\045" +
    "\204\046\246\047\142\055\177\056\235\057\227\061\243" +
    "\063\202\064\225\100\252\106\240\107\244\110\242\116" +
    "\200\122\203\123\206\132\256\133\154\136\054\210\012" +
    "\235\151\236\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\122\004\302\005" +
    "\223\016\211\017\217\020\207\021\212\022\222\023\255" +
    "\030\253\032\245\033\237\045\204\046\246\047\142\055" +
    "\177\056\235\057\227\061\243\063\202\064\225\100\252" +
    "\102\323\104\366\106\240\107\244\110\242\116\200\122" +
    "\203\123\206\124\304\126\324\127\326\131\175\132\256" +
    "\133\154\136\054\147\367\210\012\235\151\236\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\116\004\302\005\223\016\211\017\217\020\207\021" +
    "\212\022\222\023\255\030\253\032\245\033\237\045\204" +
    "\046\246\047\142\055\177\056\235\057\227\061\243\063" +
    "\202\064\225\100\252\102\323\106\240\107\244\110\242" +
    "\116\200\122\203\123\206\124\304\126\324\127\333\131" +
    "\175\132\256\133\154\136\054\210\012\235\151\236\165" +
    "\001\001\000\040\043\016\050\375\053\374\057\057\060" +
    "\004\061\017\074\075\077\077\136\054\145\074\151\037" +
    "\152\066\153\071\177\373\210\012\001\001\000\002\001" +
    "\001\000\040\043\016\050\u011e\053\374\057\057\060\004" +
    "\061\017\074\075\077\077\111\u011d\136\054\145\074\151" +
    "\037\152\066\153\071\210\012\001\001\000\032\044\u0106" +
    "\051\u0107\052\376\135\377\136\160\161\u0102\162\u0100\163" +
    "\u0101\167\u0105\211\144\213\155\214\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\044\u0106\062\u011b\135" +
    "\377\136\160\161\u011a\162\u0100\167\u011c\211\144\213\155" +
    "\214\131\001\001\000\004\040\u0119\001\001\000\004\163" +
    "\u0111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\112\u010a\113\113\141\070\143\020\001\001" +
    "\000\010\042\u010d\043\u010b\146\u010c\001\001\000\006\043" +
    "\u010b\146\u010e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\u0113\001\001\000\022\041\u0114\043\016\057\057" +
    "\060\004\061\017\136\054\151\u0115\210\012\001\001\000" +
    "\002\001\001\000\032\044\u0106\051\u0118\052\376\135\377" +
    "\136\160\161\u0102\162\u0100\163\u0101\167\u0105\211\144\213" +
    "\155\214\131\001\001\000\032\041\u0116\043\016\057\057" +
    "\060\004\061\017\112\u0117\113\113\136\054\141\070\143" +
    "\020\151\u0115\210\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\120\004\302\005\223\016\211\017\217\020\207\021\212" +
    "\022\222\023\255\030\253\032\245\033\237\045\204\046" +
    "\246\047\142\055\177\056\235\057\227\061\243\063\202" +
    "\064\225\100\252\102\323\104\u0132\106\240\107\244\110" +
    "\242\116\200\122\203\123\206\124\304\126\324\127\326" +
    "\131\175\132\256\133\154\136\054\210\012\235\151\236" +
    "\165\001\001\000\014\047\142\110\u0130\133\154\235\151" +
    "\236\165\001\001\000\002\001\001\000\120\004\302\005" +
    "\223\016\211\017\217\020\207\021\212\022\222\023\255" +
    "\030\253\032\245\033\237\045\204\046\246\047\142\055" +
    "\177\056\235\057\227\061\243\063\202\064\225\100\252" +
    "\102\u012a\106\240\107\244\110\242\116\200\122\203\123" +
    "\206\124\304\125\u0128\126\u012b\131\175\132\256\133\154" +
    "\136\054\155\u0129\210\012\235\151\236\165\001\001\000" +
    "\016\047\142\110\u0127\133\154\200\u0126\235\151\236\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\112\004\302\005\223\016\211\017" +
    "\217\020\207\021\212\022\222\023\255\030\253\032\245" +
    "\033\237\045\204\046\246\047\142\055\177\056\235\057" +
    "\227\061\243\063\202\064\225\100\252\106\240\107\244" +
    "\110\242\116\200\122\203\123\206\124\304\126\u012f\131" +
    "\175\132\256\133\154\136\054\210\012\235\151\236\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\122\004\302\005\223\016\211\017\217" +
    "\020\207\021\212\022\222\023\255\030\253\032\245\033" +
    "\237\045\204\046\246\047\142\055\177\056\235\057\227" +
    "\061\243\063\202\064\225\100\252\102\323\104\366\106" +
    "\240\107\244\110\242\116\200\122\203\123\206\124\304" +
    "\126\324\127\326\131\175\132\256\133\154\136\054\147" +
    "\u0139\210\012\235\151\236\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\102\u0137\001" +
    "\001\000\002\001\001\000\004\102\364\001\001\000\062" +
    "\005\223\030\253\032\245\033\237\045\204\047\142\055" +
    "\177\056\235\057\227\061\243\063\u0140\064\225\100\252" +
    "\106\240\107\244\110\242\116\200\123\206\132\256\133" +
    "\154\136\054\210\012\235\151\236\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\142\004\302\005\223\016\211" +
    "\017\217\020\207\021\212\022\222\023\255\030\253\032" +
    "\245\033\237\043\016\045\204\046\246\047\142\050\375" +
    "\053\374\055\177\056\235\057\u013c\060\004\061\u013e\063" +
    "\202\064\225\074\075\077\077\100\252\106\240\107\244" +
    "\110\242\116\200\122\203\123\206\124\304\125\u013b\126" +
    "\u012b\131\175\132\256\133\154\136\054\145\074\151\037" +
    "\152\066\153\071\177\u0146\210\012\235\151\236\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\015\u0161\031\134" +
    "\044\162\047\142\051\u0164\052\376\110\161\133\154\135" +
    "\135\136\160\156\132\161\u0102\162\u0160\163\u0101\167\u0105" +
    "\205\163\211\144\213\155\214\131\235\151\236\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\102\015\u0154" +
    "\031\134\037\u0156\043\016\044\162\047\142\053\051\057" +
    "\057\060\004\061\017\074\075\077\077\110\161\133\154" +
    "\135\135\136\u0155\145\074\151\037\152\066\153\071\156" +
    "\132\162\136\202\u0153\205\163\206\062\207\053\210\012" +
    "\211\144\213\155\214\131\235\151\236\165\001\001\000" +
    "\016\044\u0159\135\377\136\160\211\144\213\155\214\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\037\u0156\043\016\053\051\057\057\060\004" +
    "\061\017\074\075\077\077\136\054\145\074\151\037\152" +
    "\066\153\071\202\u0153\206\062\207\053\210\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\112\u015b\113\113\141\070\143\020\001\001\000\010" +
    "\042\u015c\043\u010b\146\u010c\001\001\000\002\001\001\000" +
    "\046\037\u0151\043\016\053\051\057\057\060\004\061\017" +
    "\074\075\077\077\136\054\145\074\151\037\152\066\153" +
    "\071\202\u014e\206\062\207\053\210\012\220\u015f\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\031\u016a\044" +
    "\162\047\142\062\u011b\110\161\133\154\135\135\136\160" +
    "\156\166\161\u011a\162\u0160\167\u011c\205\163\211\144\213" +
    "\155\214\131\235\151\236\165\001\001\000\002\001\001" +
    "\000\014\047\142\110\u0167\133\154\235\151\236\165\001" +
    "\001\000\106\031\167\037\u0151\043\016\044\162\047\142" +
    "\053\051\057\057\060\004\061\017\074\075\077\077\110" +
    "\161\114\u014b\133\154\135\135\136\u0155\145\074\151\037" +
    "\152\066\153\071\156\166\162\136\202\u014e\205\163\206" +
    "\062\207\053\210\012\211\144\213\155\214\131\217\u014f" +
    "\220\u0150\235\151\236\165\001\001\000\002\001\001\000" +
    "\116\004\302\005\223\016\211\017\217\020\207\021\212" +
    "\022\222\023\255\030\253\032\245\033\237\045\204\046" +
    "\246\047\142\055\177\056\235\057\227\061\243\063\202" +
    "\064\225\100\252\102\323\106\240\107\244\110\242\116" +
    "\200\122\203\123\206\124\304\126\324\127\u0166\131\175" +
    "\132\256\133\154\136\054\210\012\235\151\236\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\116\004\302" +
    "\005\223\016\211\017\217\020\207\021\212\022\222\023" +
    "\255\030\253\032\245\033\237\045\204\046\246\047\142" +
    "\055\177\056\235\057\227\061\243\063\202\064\225\100" +
    "\252\102\323\106\240\107\244\110\242\116\200\122\203" +
    "\123\206\124\304\126\324\127\u0169\131\175\132\256\133" +
    "\154\136\054\210\012\235\151\236\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\015\u0171\031\134\044\162" +
    "\047\142\110\161\133\154\135\135\136\160\156\132\162" +
    "\136\205\163\211\144\213\155\214\131\235\151\236\165" +
    "\245\u0170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\116\004\302\005\223\016\211\017\217" +
    "\020\207\021\212\022\222\023\255\030\253\032\245\033" +
    "\237\045\204\046\246\047\142\055\177\056\235\057\227" +
    "\061\243\063\202\064\225\100\252\102\323\106\240\107" +
    "\244\110\242\116\200\122\203\123\206\124\304\126\324" +
    "\127\u0173\131\175\132\256\133\154\136\054\210\012\235" +
    "\151\236\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\u0178\036\u017a\001\001\000" +
    "\174\004\302\005\223\016\211\017\217\020\207\021\212" +
    "\022\222\023\255\030\253\032\245\033\237\036\u0198\037" +
    "\u019e\043\016\045\204\046\246\047\142\053\051\055\177" +
    "\056\235\057\u013c\060\004\061\u013e\063\202\064\225\074" +
    "\075\077\077\100\252\106\240\107\244\110\242\116\200" +
    "\120\u0197\121\056\122\203\123\206\124\304\125\u0196\126" +
    "\u012b\131\175\132\256\133\154\136\054\145\074\151\037" +
    "\152\066\153\071\165\026\206\062\207\053\210\012\222" +
    "\u0199\223\u01aa\225\u0193\226\u019a\227\u0195\230\u01ab\231\u01a3" +
    "\233\u019b\235\151\236\165\001\001\000\002\001\001\000" +
    "\026\044\u017f\134\u017b\135\u017e\136\u0183\160\u0181\203\u017d" +
    "\204\u0182\211\144\213\155\214\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\u018e" +
    "\001\001\000\002\001\001\000\004\135\u018d\001\001\000" +
    "\002\001\001\000\004\102\u0189\001\001\000\004\144\u0186" +
    "\001\001\000\002\001\001\000\026\044\u017f\134\u017b\135" +
    "\u017e\136\u0183\160\u0181\203\u0187\204\u0182\211\144\213\155" +
    "\214\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\144\u0188\001\001\000\002\001\001\000\002\001\001" +
    "\000\122\004\302\005\223\016\211\017\217\020\207\021" +
    "\212\022\222\023\255\030\253\032\245\033\237\045\204" +
    "\046\246\047\142\055\177\056\235\057\227\061\243\063" +
    "\202\064\225\100\252\102\323\104\366\106\240\107\244" +
    "\110\242\116\200\122\203\123\206\124\304\126\324\127" +
    "\326\131\175\132\256\133\154\136\054\147\u018b\210\012" +
    "\235\151\236\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\044\u0190" +
    "\135\u0191\136\160\211\144\213\155\214\131\001\001\000" +
    "\004\135\u0192\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\172" +
    "\004\302\005\223\016\211\017\217\020\207\021\212\022" +
    "\222\023\255\030\253\032\245\033\237\036\u0198\037\u019e" +
    "\043\016\045\204\046\246\047\142\053\051\055\177\056" +
    "\235\057\u013c\060\004\061\u013e\063\202\064\225\074\075" +
    "\077\077\100\252\106\240\107\244\110\242\116\200\120" +
    "\u0197\121\056\122\203\123\206\124\304\125\u0196\126\u012b" +
    "\131\175\132\256\133\154\136\054\145\074\151\037\152" +
    "\066\153\071\165\026\206\062\207\053\210\012\223\u01e7" +
    "\225\u0193\226\u019a\227\u0195\230\u01ab\231\u01a3\233\u019b\235" +
    "\151\236\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\015\u0171\031" +
    "\134\044\162\047\142\110\161\133\154\135\135\136\160" +
    "\156\132\162\136\205\163\211\144\213\155\214\131\235" +
    "\151\236\165\244\157\245\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\172\004\302\005\223\016\211\017" +
    "\217\020\207\021\212\022\222\023\255\030\253\032\245" +
    "\033\237\036\u0198\037\u019e\043\016\045\204\046\246\047" +
    "\142\053\051\055\177\056\235\057\u013c\060\004\061\u013e" +
    "\063\202\064\225\074\075\077\077\100\252\106\240\107" +
    "\244\110\242\116\200\120\u0197\121\056\122\203\123\206" +
    "\124\304\125\u0196\126\u012b\131\175\132\256\133\154\136" +
    "\054\145\074\151\037\152\066\153\071\165\026\206\062" +
    "\207\053\210\012\223\u01c6\225\u0193\226\u019a\227\u0195\230" +
    "\u01ab\231\u01a3\233\u019b\235\151\236\165\001\001\000\114" +
    "\004\302\005\223\016\211\017\217\020\207\021\212\022" +
    "\222\023\255\030\253\032\245\033\237\045\204\046\246" +
    "\047\142\055\177\056\235\057\227\061\243\063\202\064" +
    "\225\100\252\106\240\107\244\110\242\116\200\122\203" +
    "\123\206\124\304\125\u01c3\126\u012b\131\175\132\256\133" +
    "\154\136\054\210\012\235\151\236\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\112\004\224" +
    "\005\223\016\211\017\217\020\207\021\212\022\222\023" +
    "\255\030\253\032\245\033\237\045\204\046\246\047\142" +
    "\054\u01ac\055\177\056\235\057\227\061\243\063\202\064" +
    "\225\100\252\106\240\107\244\110\242\116\200\122\203" +
    "\123\206\124\247\131\175\132\256\133\154\136\054\210" +
    "\012\235\151\236\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\172\004\302\005\223\016" +
    "\211\017\217\020\207\021\212\022\222\023\255\030\253" +
    "\032\245\033\237\036\u0198\037\u019e\043\016\045\204\046" +
    "\246\047\142\053\051\055\177\056\235\057\u013c\060\004" +
    "\061\u013e\063\202\064\225\074\075\077\077\100\252\106" +
    "\240\107\244\110\242\116\200\120\u0197\121\056\122\203" +
    "\123\206\124\304\125\u0196\126\u012b\131\175\132\256\133" +
    "\154\136\054\145\074\151\037\152\066\153\071\165\026" +
    "\206\062\207\053\210\012\223\u01ae\225\u0193\226\u019a\227" +
    "\u0195\230\u01ab\231\u01a3\233\u019b\235\151\236\165\001\001" +
    "\000\002\001\001\000\150\004\302\005\223\016\211\017" +
    "\217\020\207\021\212\022\222\023\255\030\253\032\245" +
    "\033\237\037\u0156\043\016\045\204\046\246\047\142\053" +
    "\051\055\177\056\235\057\u013c\060\004\061\u013e\063\202" +
    "\064\225\074\075\077\077\100\252\106\240\107\244\110" +
    "\242\116\200\122\203\123\206\124\304\125\u01b0\126\u012b" +
    "\131\175\132\256\133\154\136\054\145\074\151\037\152" +
    "\066\153\071\202\u01b1\206\062\207\053\210\012\235\151" +
    "\236\165\242\u01b2\001\001\000\002\001\001\000\042\015" +
    "\u01bb\031\134\044\162\047\142\110\161\133\154\135\135" +
    "\136\160\156\132\162\136\205\163\211\144\213\155\214" +
    "\131\235\151\236\165\001\001\000\002\001\001\000\004" +
    "\263\u01b4\001\001\000\172\004\302\005\223\016\211\017" +
    "\217\020\207\021\212\022\222\023\255\030\253\032\245" +
    "\033\237\036\u0198\037\u019e\043\016\045\204\046\246\047" +
    "\142\053\051\055\177\056\235\057\u013c\060\004\061\u013e" +
    "\063\202\064\225\074\075\077\077\100\252\106\240\107" +
    "\244\110\242\116\200\120\u0197\121\056\122\203\123\206" +
    "\124\304\125\u0196\126\u012b\131\175\132\256\133\154\136" +
    "\054\145\074\151\037\152\066\153\071\165\026\206\062" +
    "\207\053\210\012\223\u01b5\225\u0193\226\u019a\227\u0195\230" +
    "\u01ab\231\u01a3\233\u019b\235\151\236\165\001\001\000\004" +
    "\264\u01b6\001\001\000\006\255\u01b8\265\u01b7\001\001\000" +
    "\002\001\001\000\002\001\001\000\172\004\302\005\223" +
    "\016\211\017\217\020\207\021\212\022\222\023\255\030" +
    "\253\032\245\033\237\036\u0198\037\u019e\043\016\045\204" +
    "\046\246\047\142\053\051\055\177\056\235\057\u013c\060" +
    "\004\061\u013e\063\202\064\225\074\075\077\077\100\252" +
    "\106\240\107\244\110\242\116\200\120\u0197\121\056\122" +
    "\203\123\206\124\304\125\u0196\126\u012b\131\175\132\256" +
    "\133\154\136\054\145\074\151\037\152\066\153\071\165" +
    "\026\206\062\207\053\210\012\223\u01ba\225\u0193\226\u019a" +
    "\227\u0195\230\u01ab\231\u01a3\233\u019b\235\151\236\165\001" +
    "\001\000\002\001\001\000\004\102\u01bd\001\001\000\116" +
    "\004\302\005\223\016\211\017\217\020\207\021\212\022" +
    "\222\023\255\030\253\032\245\033\237\045\204\046\246" +
    "\047\142\055\177\056\235\057\227\061\243\063\202\064" +
    "\225\100\252\102\323\106\240\107\244\110\242\116\200" +
    "\122\203\123\206\124\304\126\324\127\u01be\131\175\132" +
    "\256\133\154\136\054\210\012\235\151\236\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\172\004\302\005\223\016\211\017\217\020\207\021\212" +
    "\022\222\023\255\030\253\032\245\033\237\036\u0198\037" +
    "\u019e\043\016\045\204\046\246\047\142\053\051\055\177" +
    "\056\235\057\u013c\060\004\061\u013e\063\202\064\225\074" +
    "\075\077\077\100\252\106\240\107\244\110\242\116\200" +
    "\120\u0197\121\056\122\203\123\206\124\304\125\u0196\126" +
    "\u012b\131\175\132\256\133\154\136\054\145\074\151\037" +
    "\152\066\153\071\165\026\206\062\207\053\210\012\223" +
    "\u01c1\225\u0193\226\u019a\227\u0195\230\u01ab\231\u01a3\233\u019b" +
    "\235\151\236\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\114\004\302\005" +
    "\223\016\211\017\217\020\207\021\212\022\222\023\255" +
    "\030\253\032\245\033\237\045\204\046\246\047\142\055" +
    "\177\056\235\057\227\061\243\063\202\064\225\100\252" +
    "\106\240\107\244\110\242\116\200\122\203\123\206\124" +
    "\304\125\u01c9\126\u012b\131\175\132\256\133\154\136\054" +
    "\210\012\235\151\236\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\156\004\302\005\223" +
    "\016\211\017\217\020\207\021\212\022\222\023\255\030" +
    "\253\032\245\033\237\037\u019e\043\016\045\204\046\246" +
    "\047\142\050\u01cd\053\u01d1\055\177\056\235\057\u013c\060" +
    "\004\061\u013e\063\202\064\225\074\075\077\077\100\252" +
    "\106\240\107\244\110\242\116\200\122\203\123\206\124" +
    "\304\125\u0196\126\u012b\131\175\132\256\133\154\136\054" +
    "\145\074\151\037\152\066\153\071\165\u01d0\206\062\207" +
    "\053\210\012\233\u01ce\235\151\236\165\251\u01d2\254\u01cf" +
    "\001\001\000\042\015\u01df\031\134\044\162\047\142\110" +
    "\161\133\154\135\135\136\160\156\132\162\136\205\163" +
    "\211\144\213\155\214\131\235\151\236\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\043\016\050\u011e\053\374\057\057\060\004\061\017\074" +
    "\075\077\077\111\u011d\136\054\145\074\151\037\152\066" +
    "\153\071\210\012\001\001\000\152\004\302\005\223\016" +
    "\211\017\217\020\207\021\212\022\222\023\255\030\253" +
    "\032\245\033\237\037\u0156\043\016\045\204\046\246\047" +
    "\142\053\051\055\177\056\235\057\u013c\060\004\061\u013e" +
    "\063\202\064\225\074\075\077\077\100\252\106\240\107" +
    "\244\110\242\116\200\122\203\123\206\124\304\125\u01b0" +
    "\126\u012b\131\175\132\256\133\154\136\054\145\074\151" +
    "\037\152\066\153\071\202\u01b1\206\062\207\053\210\012" +
    "\235\151\236\165\242\u01d3\243\u01d4\001\001\000\002\001" +
    "\001\000\002\001\001\000\116\004\302\005\223\016\211" +
    "\017\217\020\207\021\212\022\222\023\255\030\253\032" +
    "\245\033\237\045\204\046\246\047\142\055\177\056\235" +
    "\057\227\061\243\063\202\064\225\100\252\106\240\107" +
    "\244\110\242\116\200\122\203\123\206\124\304\125\u0196" +
    "\126\u012b\131\175\132\256\133\154\136\054\210\012\233" +
    "\u01d6\235\151\236\165\001\001\000\002\001\001\000\172" +
    "\004\302\005\223\016\211\017\217\020\207\021\212\022" +
    "\222\023\255\030\253\032\245\033\237\036\u0198\037\u019e" +
    "\043\016\045\204\046\246\047\142\053\051\055\177\056" +
    "\235\057\u013c\060\004\061\u013e\063\202\064\225\074\075" +
    "\077\077\100\252\106\240\107\244\110\242\116\200\120" +
    "\u0197\121\056\122\203\123\206\124\304\125\u0196\126\u012b" +
    "\131\175\132\256\133\154\136\054\145\074\151\037\152" +
    "\066\153\071\165\026\206\062\207\053\210\012\223\u01d8" +
    "\225\u0193\226\u019a\227\u0195\230\u01ab\231\u01a3\233\u019b\235" +
    "\151\236\165\001\001\000\002\001\001\000\116\004\302" +
    "\005\223\016\211\017\217\020\207\021\212\022\222\023" +
    "\255\030\253\032\245\033\237\045\204\046\246\047\142" +
    "\055\177\056\235\057\227\061\243\063\202\064\225\100" +
    "\252\106\240\107\244\110\242\116\200\122\203\123\206" +
    "\124\304\125\u01da\126\u012b\131\175\132\256\133\154\136" +
    "\054\210\012\235\151\236\165\253\u01db\001\001\000\004" +
    "\102\u01de\001\001\000\002\001\001\000\172\004\302\005" +
    "\223\016\211\017\217\020\207\021\212\022\222\023\255" +
    "\030\253\032\245\033\237\036\u0198\037\u019e\043\016\045" +
    "\204\046\246\047\142\053\051\055\177\056\235\057\u013c" +
    "\060\004\061\u013e\063\202\064\225\074\075\077\077\100" +
    "\252\106\240\107\244\110\242\116\200\120\u0197\121\056" +
    "\122\203\123\206\124\304\125\u0196\126\u012b\131\175\132" +
    "\256\133\154\136\054\145\074\151\037\152\066\153\071" +
    "\165\026\206\062\207\053\210\012\223\u01dd\225\u0193\226" +
    "\u019a\227\u0195\230\u01ab\231\u01a3\233\u019b\235\151\236\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\150\004\302\005\223\016\211\017\217\020\207" +
    "\021\212\022\222\023\255\030\253\032\245\033\237\037" +
    "\u0156\043\016\045\204\046\246\047\142\053\051\055\177" +
    "\056\235\057\u013c\060\004\061\u013e\063\202\064\225\074" +
    "\075\077\077\100\252\106\240\107\244\110\242\116\200" +
    "\122\203\123\206\124\304\125\u01b0\126\u012b\131\175\132" +
    "\256\133\154\136\054\145\074\151\037\152\066\153\071" +
    "\202\u01b1\206\062\207\053\210\012\235\151\236\165\242" +
    "\u01e1\001\001\000\002\001\001\000\172\004\302\005\223" +
    "\016\211\017\217\020\207\021\212\022\222\023\255\030" +
    "\253\032\245\033\237\036\u0198\037\u019e\043\016\045\204" +
    "\046\246\047\142\053\051\055\177\056\235\057\u013c\060" +
    "\004\061\u013e\063\202\064\225\074\075\077\077\100\252" +
    "\106\240\107\244\110\242\116\200\120\u0197\121\056\122" +
    "\203\123\206\124\304\125\u0196\126\u012b\131\175\132\256" +
    "\133\154\136\054\145\074\151\037\152\066\153\071\165" +
    "\026\206\062\207\053\210\012\223\u01e3\225\u0193\226\u019a" +
    "\227\u0195\230\u01ab\231\u01a3\233\u019b\235\151\236\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\172\004\302\005\223\016\211\017\217\020\207\021\212" +
    "\022\222\023\255\030\253\032\245\033\237\036\u0198\037" +
    "\u019e\043\016\045\204\046\246\047\142\053\051\055\177" +
    "\056\235\057\u013c\060\004\061\u013e\063\202\064\225\074" +
    "\075\077\077\100\252\106\240\107\244\110\242\116\200" +
    "\120\u0197\121\056\122\203\123\206\124\304\125\u0196\126" +
    "\u012b\131\175\132\256\133\154\136\054\145\074\151\037" +
    "\152\066\153\071\165\026\206\062\207\053\210\012\223" +
    "\u01ea\225\u0193\226\u019a\227\u0195\230\u01ab\231\u01a3\233\u019b" +
    "\235\151\236\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\240\u01ef" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\044\u01f5\135\u01f4\136\160\211\144\212\u01f3" +
    "\213\155\214\131\001\001\000\004\135\u01f6\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\042\u01f8\043\u010b\146\u010c\001\001\000\002\001\001\000" +
    "\004\040\u01fa\001\001\000\002\001\001\000\114\004\302" +
    "\005\223\016\211\017\217\020\207\021\212\022\222\023" +
    "\255\030\253\032\245\033\237\045\204\046\246\047\142" +
    "\055\177\056\235\057\227\061\243\063\202\064\225\100" +
    "\252\106\240\107\244\110\242\116\200\122\203\123\206" +
    "\124\304\125\u01fc\126\u012b\131\175\132\256\133\154\136" +
    "\054\210\012\235\151\236\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\072\012\064\037\060\043" +
    "\016\053\051\057\057\060\004\061\017\074\075\077\077" +
    "\113\100\120\013\121\056\136\054\141\070\143\020\145" +
    "\074\151\037\152\066\153\071\157\006\164\041\165\026" +
    "\175\u0207\176\065\206\062\207\053\210\012\260\024\001" +
    "\001\000\046\014\u0208\037\u0156\043\016\053\051\057\057" +
    "\060\004\061\017\074\075\077\077\136\054\145\074\151" +
    "\037\152\066\153\071\202\u0209\206\062\207\053\210\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\043\016\050\375\053\374" +
    "\057\057\060\004\061\017\074\075\077\077\136\054\145" +
    "\074\151\037\152\066\153\071\177\u020c\210\012\001\001" +
    "\000\004\144\u020d\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\u0215\065\u0210\070\u0211\072\u0213\142\u0214" +
    "\001\001\000\006\066\u0220\067\u0222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\u021a\065\u0210\070\u0211\072" +
    "\u0219\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\u0227\071\u0223\150\u0225\001" +
    "\001\000\002\001\001\000\006\010\u022b\150\u0225\001\001" +
    "\000\010\010\u0227\071\u022e\150\u0225\001\001\000\002\001" +
    "\001\000\010\010\u0227\071\u022c\150\u0225\001\001\000\002" +
    "\001\001\000\010\010\u0227\071\u0229\150\u0225\001\001\000" +
    "\006\010\u022b\150\u0225\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\u022b\150\u0225\001\001\000\002\001" +
    "\001\000\006\010\u022b\150\u0225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\043\016\050\375\053\374\057\057\060\004\061\017" +
    "\074\075\077\077\136\054\145\074\151\037\152\066\153" +
    "\071\177\u0234\210\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\135\377\211\u0237\213\155\214\131\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 SemanticAnalysis.parser = this;              
    }



    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
        m.append(info);
        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }

    public Parser(Lexer lex, ComplexSymbolFactory sf) {
    	super(lex,sf);
    }

    public static void main(String[] args) {
        String filePath = args[0];
        try {
    	    System.out.println("Start compiling \"" + filePath + "\"...");
    	    ComplexSymbolFactory csf = new ComplexSymbolFactory();
    	    Lexer scanner = new Lexer(new BufferedReader(new FileReader(filePath)), csf);
    	    Parser parser = new Parser(scanner, csf);
    		ComplexSymbolFactory.ComplexSymbol s = (ComplexSymbolFactory.ComplexSymbol)parser.parse();

    		if ("$START".equals(s.getName()))
    			System.out.println("> SUCCESSFULL COMPILATION: " + filePath);
    		else
    			System.out.println(s);

    	} catch (Exception e) {
    		System.err.println("Failed to compile \"" + filePath + "\":");
    		System.err.println(e.getMessage());
    		e.printStackTrace();
    	}
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= translationUnit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // translationUnit ::= declarationSeqOpt 
            {
              Object RESULT =null;
		 Logger.print("120 translationUnit (declarationSeqOpt)"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("translationUnit",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarationSeqOpt ::= declarationSeq 
            {
              Object RESULT =null;
		 Logger.print("121 declarationSeqOpt (declarationSeq)"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarationSeqOpt",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarationSeqOpt ::= 
            {
              Object RESULT =null;
		 Logger.print("121 declarationSeqOpt (empty)"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarationSeqOpt",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarationSeq ::= declaration 
            {
              Object RESULT =null;
		 Logger.print("122 declarationSeq (declaration)"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarationSeq",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarationSeq ::= declarationSeq declaration 
            {
              Object RESULT =null;
		 Logger.print("122 declarationSeq (declarationSeq declaration)"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarationSeq",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= blockDeclaration 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("130 declaration (blockDeclaration:b) "  + b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= functionDef 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("130 declaration (functionDef:f) "  + f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= linkageSpec 
            {
              Object RESULT =null;
		 Logger.print("130 declaration (linkageSpec)"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= emptyDeclaration 
            {
              Object RESULT =null;
		 Logger.print("130 declaration (emptyDeclaration)"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= attributeDecl 
            {
              Object RESULT =null;
		 Logger.print("130 declaration (attributeDecl)" ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration ::= includeDef 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("130 declaration (includeDef) " + i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // includeDef ::= INCLUDE includeFileLit 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("131 includeDef(INCLUDE includeFileLit:il) " + il); RESULT = il; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("includeDef",174, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // includeFileLit ::= INCLUDE_LITERAL 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("132 includeFileLit(INCLUDE_LITERAL:il) " + il); RESULT = il; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("includeFileLit",175, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // includeFileLit ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("132 includeFileLit(STRING_LITERAL:sl) " + sl); RESULT = sl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("includeFileLit",175, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // attributeDecl ::= attributeSpecSeq SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeDecl",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // linkageSpec ::= EXTERN stringLiteral LBRK declSpecSeqOpt RBRK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linkageSpec",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // linkageSpec ::= EXTERN stringLiteral declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linkageSpec",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // identifierOpt ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierOpt",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // identifierOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierOpt",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$0 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object de = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Logger.print("pre-159 declSpec: " + d + " declarator: " + de); ((NamedEntity)de).setLocation(((java_cup.runtime.Symbol)CUP$Parser$stack.peek())); ((Function) de).setReturnType((Type) d); SemanticAnalysis.getInstance().addFunctionAndNewScope((Function) de); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",176, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // functionDef ::= declSpec declarator NT$0 functionBody 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int deright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object de = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("159 " + d + " " + fb);  SemanticAnalysis.getInstance().exitCurrentScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionDef",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declSpecSeqOpt ::= declSpecSeq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declSpecSeqOpt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declSpecSeqOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declSpecSeqOpt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declSpecSeq ::= declSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declSpecSeq",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declSpecSeq ::= declSpec declSpecSeq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declSpecSeq",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declSpec ::= storageClassSpec 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("168 storageClassSpec" + s); RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declSpec",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declSpec ::= typeSpec 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("169 typeSpec " + t); RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declSpec",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declSpec ::= functionSpec 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("170 functionSpec" + f); RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declSpec",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declSpec ::= FRIEND 
            {
              Object RESULT =null;
		 RESULT = new Node("friend", "primario");  Logger.print("friend"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declSpec",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declSpec ::= TYPEDEF 
            {
              Object RESULT =null;
		 RESULT = new Node("typedef", "primario");  Logger.print("typedef"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declSpec",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declSpec ::= CONSTEXPR 
            {
              Object RESULT =null;
		 RESULT = new Node("constexpr", "primario");  Logger.print("constexpr"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declSpec",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // storageClassSpec ::= AUTO 
            {
              Object RESULT =null;
		 RESULT = new Node("auto", "primario");  Logger.print("auto");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("storageClassSpec",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // storageClassSpec ::= REGISTER 
            {
              Object RESULT =null;
		 RESULT = new Node("register", "primario");  Logger.print("register");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("storageClassSpec",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // storageClassSpec ::= STATIC 
            {
              Object RESULT =null;
		 RESULT = new Node("static", "primario");  Logger.print("static");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("storageClassSpec",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // storageClassSpec ::= EXTERN 
            {
              Object RESULT =null;
		 RESULT = new Node("extern", "primario");  Logger.print("extern");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("storageClassSpec",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // functionSpec ::= EXPLICIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionSpec",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // typeSpec ::= trailingTypeSpec 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("184 trailingTypeSpec " + t); RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeSpec",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // typeSpec ::= classSpec 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("185 classSpec " + c); RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeSpec",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // typeSpec ::= enumSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeSpec",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // typeName ::= className 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeName",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // typeName ::= enumName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeName",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // typeName ::= typedefName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeName",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // enumName ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumName",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // typedefName ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedefName",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // trailingTypeSpec ::= simpleTypeSpec 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("198 simpleTypeSpec " + s); RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailingTypeSpec",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // trailingTypeSpec ::= elaboratedTypeSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailingTypeSpec",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // trailingTypeSpec ::= typenameSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailingTypeSpec",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // trailingTypeSpec ::= cvQualifier trailingTypeSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailingTypeSpec",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sepptrOpt ::= SEPPTR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sepptrOpt",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sepptrOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sepptrOpt",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // nestedNameSpecOpt ::= nestedNameSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nestedNameSpecOpt",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // nestedNameSpecOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nestedNameSpecOpt",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // nestedNameSpec ::= typeName COLON COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nestedNameSpec",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // nestedNameSpec ::= declTypeSpec COLON COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nestedNameSpec",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // nestedNameSpec ::= nestedNameSpec IDENTIFIER COLON COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nestedNameSpec",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // simpleTypeSpec ::= sepptrOpt nestedNameSpecOpt typeName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // simpleTypeSpec ::= UNSIGNED CHAR 
            {
              Object RESULT =null;
		 RESULT = new Type("unsigned char"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // simpleTypeSpec ::= UNSIGNED INT 
            {
              Object RESULT =null;
		 RESULT = new Type("unsigned int"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // simpleTypeSpec ::= UNSIGNED LONG 
            {
              Object RESULT =null;
		 RESULT = new Type("unsigned long"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // simpleTypeSpec ::= STRING 
            {
              Object RESULT =null;
		 RESULT = new Type("string"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // simpleTypeSpec ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = new Type("bool"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // simpleTypeSpec ::= BYTE 
            {
              Object RESULT =null;
		 RESULT = new Type("byte"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // simpleTypeSpec ::= SHORT 
            {
              Object RESULT =null;
		 RESULT = new Type("short"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // simpleTypeSpec ::= SIGNED 
            {
              Object RESULT =null;
		 RESULT = new Type("signed"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // simpleTypeSpec ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = new Type("float"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // simpleTypeSpec ::= DOUBLE 
            {
              Object RESULT =null;
		 RESULT = new Type("double"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // simpleTypeSpec ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = new Type("char"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // simpleTypeSpec ::= INT 
            {
              Object RESULT =null;
		 RESULT = new Type("int"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // simpleTypeSpec ::= LONG 
            {
              Object RESULT =null;
		 RESULT = new Type("long"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // simpleTypeSpec ::= VOID 
            {
              Object RESULT =null;
		 RESULT = new Type("void"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // simpleTypeSpec ::= WORD 
            {
              Object RESULT =null;
		 RESULT = new Type("word"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // simpleTypeSpec ::= AUTO 
            {
              Object RESULT =null;
		 RESULT = new Type("auto"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // simpleTypeSpec ::= declTypeSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // functionBody ::= COLON memInitializerList compoundStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionBody",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // functionBody ::= compoundStatement 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("229 funcBody -> compoundStatement " + c ); RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionBody",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // memInitializerList ::= memInitializer dotsOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("memInitializerList",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // memInitializerList ::= memInitializer COMMA memInitializerList dotsOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("memInitializerList",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // memInitializer ::= memInitializerId LPAR exprListOpt RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("memInitializer",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // memInitializer ::= memInitializerId bracedInitList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("memInitializer",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // memInitializerId ::= classOrDeclType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("memInitializerId",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // memInitializerId ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("memInitializerId",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declarator ::= ptrDeclarator 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("244 declarator (ptrDeclarator:p) " + p ); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declarator ::= noPtrDeclarator parametersAndQualifiers trailingReturnType 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Logger.print("244 declarator (noPtrDeclarator:p parametersAndQualifiers trailingReturnType) " + p ); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ptrDeclarator ::= noPtrDeclarator 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("248 noPtrDeclarator " + n);  RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptrDeclarator",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ptrDeclarator ::= ptrOperator ptrDeclarator 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("249 ptrDeclarator " + p); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptrDeclarator",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // noPtrDeclarator ::= declaratorId 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("252 declaratorId " + d ); RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("noPtrDeclarator",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // noPtrDeclarator ::= noPtrDeclarator parametersAndQualifiers 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("252 noptrDeclarator " + n + " paramsQualifiers " + p ); RESULT = new Function(n.toString(), (ArrayList<Parameter>) p, new SourcePosition(pleft, pright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("noPtrDeclarator",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // noPtrDeclarator ::= noPtrDeclarator LSQRBRK constExpr RSQRBRK attributeSpecSeqOpt 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Logger.print("252 noPtrDeclarator (noPtrDeclarator LSQRBRK constExpr RSQRBRK attributeSpecSeqOpt) " + n + " " + c); RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("noPtrDeclarator",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // noPtrDeclarator ::= noPtrDeclarator LSQRBRK RSQRBRK attributeSpecSeqOpt 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Logger.print("252 noPtrDeclarator (noPtrDeclarator LSQRBRK RSQRBRK attributeSpecSeqOpt) "); RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("noPtrDeclarator",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // noPtrDeclarator ::= LPAR ptrDeclarator RPAR 
            {
              Object RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("252 noPtrDeclarator (LPAR ptrDeclarator RPAR) " + pd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("noPtrDeclarator",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // declaratorId ::= idExpr 
            {
              Object RESULT =null;
		int idEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("259 idExpr " + idE ); RESULT = idE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaratorId",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // declaratorId ::= DOTS idExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaratorId",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // declaratorId ::= COLON COLON nestedNameSpecOpt className 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaratorId",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // declaratorId ::= COLON COLON className 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaratorId",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // declaratorId ::= nestedNameSpec className 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaratorId",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // declaratorId ::= className 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaratorId",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // blockDeclaration ::= simpleDecl 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("276 simpleDecl " + s ); RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockDeclaration",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // blockDeclaration ::= aliasDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockDeclaration",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // simpleDecl ::= declSpec SEMICOLON 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("284 simpleDecl (declSpec:d SEMICOLON) " + d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleDecl",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // simpleDecl ::= declSpec initDeclaratorList SEMICOLON 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("285 simpleDecl (declSpec:d initDeclaratorList:i SEMICOLON) " + d + " " + i); ((Variable) i).setType((Type) d); SemanticAnalysis.getInstance().addVariable((Variable) i); RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleDecl",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // initDeclaratorListOpt ::= initDeclaratorList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initDeclaratorListOpt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // initDeclaratorListOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initDeclaratorListOpt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // initDeclaratorList ::= initDeclarator 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("291 " + i); RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initDeclaratorList",162, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // initDeclaratorList ::= initDeclaratorList COMMA initDeclarator 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("292 " + il + " " + id); RESULT = il; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initDeclaratorList",162, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // initDeclarator ::= declarator 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("295 " + d); RESULT = new Variable(d.toString(), new Type("UNKNOWN")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initDeclarator",163, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // initDeclarator ::= declarator ASSIGNMENT initializeCls 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Variable v = new Variable(d.toString(), new Type("UNKNOWN")); v.setValue(i); RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initDeclarator",163, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // initializerOpt ::= initializer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializerOpt",164, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // initializerOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializerOpt",164, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // initializer ::= braceOrEqualInitializer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",165, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // initializer ::= LPAR exprListOpt RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",165, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // braceOrEqualInitializer ::= ASSIGNMENT initializeCls 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("braceOrEqualInitializer",166, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // braceOrEqualInitializer ::= bracedInitList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("braceOrEqualInitializer",166, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // aliasDeclaration ::= USING IDENTIFIER ASSIGNMENT typeId SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aliasDeclaration",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // typeId ::= typeSpecSeq abstractDeclaratorOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeId",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // abstractDeclaratorOpt ::= abstractDeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("abstractDeclaratorOpt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // abstractDeclaratorOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("abstractDeclaratorOpt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // abstractDeclarator ::= ptrAbstractDeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("abstractDeclarator",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // abstractDeclarator ::= noPtrAbstractDeclarator parametersAndQualifiers trailingReturnType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("abstractDeclarator",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // abstractDeclarator ::= parametersAndQualifiers trailingReturnType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("abstractDeclarator",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // abstractDeclarator ::= DOTS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("abstractDeclarator",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // parametersAndQualifiers ::= LPAR RPAR 
            {
              Object RESULT =null;
		 Logger.print("309 paramsQualifiers ()" );      RESULT = new ArrayList<Parameter>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametersAndQualifiers",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // parametersAndQualifiers ::= LPAR paramDeclarationCls RPAR 
            {
              Object RESULT =null;
		int pListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("310 paramsQualifiers (plist)");  RESULT = pList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametersAndQualifiers",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // paramDeclarationCls ::= paramDeclarationList 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p;  Logger.print("313 parameterDeclaration " + p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDeclarationCls",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // paramDeclarationCls ::= paramDeclarationList COMMA DOTS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDeclarationCls",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // paramDeclarationListOpt ::= paramDeclarationList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDeclarationListOpt",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // paramDeclarationListOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDeclarationListOpt",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // paramDeclarationList ::= paramDeclaration 
            {
              Object RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = Util.newList( (Parameter) pd );  Logger.print("319 parameter_declaration " + pd);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDeclarationList",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // paramDeclarationList ::= paramDeclarationList COMMA paramDeclaration 
            {
              Object RESULT =null;
		int plistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object plist = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("320 " + plist + ": " + p); ((ArrayList<Parameter>) plist).add((Parameter)p); RESULT = plist;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDeclarationList",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // paramDeclaration ::= declSpec declarator 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object de = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("323 " + d + " " + de); Variable v = new Variable(de.toString(), (Type) d); RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDeclaration",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // paramDeclaration ::= declSpecSeq declarator ASSIGNMENT initializeCls 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDeclaration",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // paramDeclaration ::= declSpecSeq abstractDeclaratorOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDeclaration",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // paramDeclaration ::= declSpecSeq abstractDeclaratorOpt ASSIGNMENT initializeCls 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDeclaration",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // cvQualifierSeqOpt ::= cvQualifierSeq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvQualifierSeqOpt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // cvQualifierSeqOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvQualifierSeqOpt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expr ::= assignmentExpr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("338 assignmentExpr " + a); RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expr ::= expr COMMA assignmentExpr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("339 expr: " + e + " assignExpr: " + a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // constExpr ::= conditionalExpr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("412 constExpr (conditionalExpr) " + e); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constExpr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // conditionalExpr ::= logicalOrExpr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("344 logicalOrExpr " + l); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionalExpr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // conditionalExpr ::= logicalOrExpr QUESTION assignmentExpr COLON assignmentExpr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("344 logicalOrExpr2 " + e1); RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionalExpr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // assignmentExprOpt ::= assignmentExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentExprOpt",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // assignmentExprOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentExprOpt",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // assignmentExpr ::= conditionalExpr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("351 conditionExpr " + e); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentExpr",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // assignmentExpr ::= logicalOrExpr assignmentOperator initializeCls 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("352 logicalOrExpr: " + u + " assignOp: " + o + " initializeCls" + e); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentExpr",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // assignmentOperator ::= ASSIGNMENT 
            {
              Object RESULT =null;
		 RESULT = new Node("=", "primario");  Logger.print("=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentOperator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // assignmentOperator ::= MULTASSIGN 
            {
              Object RESULT =null;
		 RESULT = new Node("*=", "primario"); Logger.print("*=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentOperator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // assignmentOperator ::= DIVASSIGN 
            {
              Object RESULT =null;
		 RESULT = new Node("/=", "primario"); Logger.print("/=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentOperator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // assignmentOperator ::= MODASSIGN 
            {
              Object RESULT =null;
		 RESULT = new Node("%=", "primario"); Logger.print("%=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentOperator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // assignmentOperator ::= PLUSASSIGN 
            {
              Object RESULT =null;
		 RESULT = new Node("+=", "primario"); Logger.print("+=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentOperator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // assignmentOperator ::= MINUSASSIGN 
            {
              Object RESULT =null;
		 RESULT = new Node("-=", "primario"); Logger.print("-=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentOperator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // assignmentOperator ::= RSHIFTASSIGN 
            {
              Object RESULT =null;
		 RESULT = new Node(">>=","primario"); Logger.print(">>=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentOperator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // assignmentOperator ::= LSHIFTASSIGN 
            {
              Object RESULT =null;
		 RESULT = new Node("<<=","primario"); Logger.print("<<=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentOperator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // assignmentOperator ::= ANDASSIGN 
            {
              Object RESULT =null;
		 RESULT = new Node("&=", "primario"); Logger.print("&=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentOperator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // assignmentOperator ::= XORASSIGN 
            {
              Object RESULT =null;
		 RESULT = new Node("^=", "primario"); Logger.print("^=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentOperator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // assignmentOperator ::= ORASSIGN 
            {
              Object RESULT =null;
		 RESULT = new Node("|=", "primario"); Logger.print("|=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentOperator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // initializeCls ::= assignmentExpr 
            {
              Object RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("370 initializeCls (assignmentExpr:ae) " + ae); RESULT = ae; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializeCls",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // initializeCls ::= bracedInitList 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("370 initializeCls (bracedInitList:bl) "); RESULT = bl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializeCls",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // bracedInitList ::= LBRK initializeList commaOpt RBRK 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Logger.print("453 bracedInitList (LBRK initializeList:il commaOpt RBRK) " + il); RESULT = il; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bracedInitList",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // bracedInitList ::= LBRK RBRK 
            {
              Object RESULT =null;
		 Logger.print("453 bracedInitList (LBRK RBRK) "); RESULT = Util.newList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bracedInitList",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // initializeList ::= initializeCls 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("458 initializeList (initializeCls:i) " + i); RESULT = Util.newList(Util.asExpression(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializeList",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // initializeList ::= initializeList COMMA initializeCls 
            {
              Object RESULT =null;
		int iListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object iList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ((ArrayList<Expression>) iList).add((Expression)i); RESULT = iList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializeList",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // commaOpt ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commaOpt",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // commaOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commaOpt",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // logicalOrExpr ::= logicalAndExpr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("383 " + l); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicalOrExpr",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // logicalOrExpr ::= logicalOrExpr OROP logicalAndExpr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("384 " + l + " " + e); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.OR_OP, l, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicalOrExpr",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // logicalAndExpr ::= inclusiveOrExpr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("387 " + e); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicalAndExpr",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // logicalAndExpr ::= logicalAndExpr DOUBLEAND inclusiveOrExpr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("388 " + l + " " + i); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.AND_OP, l, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicalAndExpr",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // inclusiveOrExpr ::= exclusiveOrExpr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("391 " + e); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusiveOrExpr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // inclusiveOrExpr ::= inclusiveOrExpr SOROP exclusiveOrExpr 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("392 " + i + " " + e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusiveOrExpr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // exclusiveOrExpr ::= andExpr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("395 " + a); RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusiveOrExpr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // exclusiveOrExpr ::= exclusiveOrExpr XOROP andExpr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("396 " + e + " " + a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusiveOrExpr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // andExpr ::= equalityExpr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("399 " + e); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("andExpr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // andExpr ::= andExpr SINGLEAND equalityExpr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("400 " + a + " " + e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("andExpr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // equalityExpr ::= relationalExpr 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("403 " + r); RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equalityExpr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // equalityExpr ::= equalityExpr EQOP relationalExpr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("404 " + e + " operator " + r); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.EQ_OP, e, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equalityExpr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // equalityExpr ::= equalityExpr NEQOP relationalExpr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("405 " + e + " operator " + r); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.NE_OP, e, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equalityExpr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // relationalExpr ::= shiftExpr 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("408 " + s); RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationalExpr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // relationalExpr ::= relationalExpr LT shiftExpr 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("409 " + r + " " + s); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.LESS_THAN, r, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationalExpr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // relationalExpr ::= relationalExpr GT shiftExpr 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("410 " + r + " " + s); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.MORE_THAN, r, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationalExpr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // relationalExpr ::= relationalExpr LTE shiftExpr 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("411 " + r + " " + s); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.LE_OP, r, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationalExpr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // relationalExpr ::= relationalExpr GTE shiftExpr 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("412 " + r + " " + s); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.GE_OP, r, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationalExpr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // shiftExpr ::= additiveExpr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("415 " + a); RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shiftExpr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // shiftExpr ::= shiftExpr LSHIFT additiveExpr 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("416 " + s + " " + a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shiftExpr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // shiftExpr ::= shiftExpr RSHIFT additiveExpr 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("417 " + s + " " + a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shiftExpr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // additiveExpr ::= multExpr 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("420 " + m); RESULT = m; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additiveExpr",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // additiveExpr ::= additiveExpr PLUSOP multExpr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("421 " + a + " " + m); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.PLUS, a, m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additiveExpr",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // additiveExpr ::= additiveExpr MINUSOP multExpr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("422 " + a + " " + m); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.MINUS, a, m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additiveExpr",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // multExpr ::= castExpr 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("426 " + p); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multExpr",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // multExpr ::= multExpr STAR castExpr 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("427 " + m + " " + c); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.MULT, m, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multExpr",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // multExpr ::= multExpr DIVOP castExpr 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("428 " + m + " " + c); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.DIV, m, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multExpr",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // multExpr ::= multExpr MODOP castExpr 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("429 " + m + " " + c); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.PERC, (Expression) m, (Expression) c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multExpr",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // pmExpr ::= castExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pmExpr",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // pmExpr ::= pmExpr DOTSTAR castExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pmExpr",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // pmExpr ::= pmExpr ARROWSTAR castExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pmExpr",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // castExpr ::= unaryExpr 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("437 " + u); RESULT = u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("castExpr",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // castExpr ::= LPAR typeId RPAR castExpr 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("438 " + t + " " + c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("castExpr",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // unaryExpr ::= postfixExpr 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("441 " + p); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // unaryExpr ::= AUTOINCRM castExpr 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("442 " + c); RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // unaryExpr ::= AUTODECRM castExpr 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("443 " + c); RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // unaryExpr ::= unaryOp castExpr 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("444 " + u + " " + c); RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // unaryExpr ::= SIZEOF unaryExpr 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("445 " + u); RESULT = u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // unaryExpr ::= SIZEOF LPAR typeId RPAR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("97 " + t); RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // unaryExpr ::= SIZEOF DOTS LPAR IDENTIFIER RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // unaryExpr ::= ALIGNOF LPAR typeId RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // unaryExpr ::= newExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // unaryExpr ::= deleteExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // unaryOp ::= STAR 
            {
              Object RESULT =null;
		 RESULT = new Node("*", "primario"); Logger.print("*");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // unaryOp ::= SINGLEAND 
            {
              Object RESULT =null;
		 RESULT = new Node("&", "primario"); Logger.print("&"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // unaryOp ::= PLUSOP 
            {
              Object RESULT =null;
		 RESULT = new Node("+", "primario"); Logger.print("+");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // unaryOp ::= MINUSOP 
            {
              Object RESULT =null;
		 RESULT = new Node("-", "primario"); Logger.print("-");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // unaryOp ::= LOGNEGATION 
            {
              Object RESULT =null;
		 RESULT = new Node("!", "primario"); Logger.print("!");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // unaryOp ::= BINNEG 
            {
              Object RESULT =null;
		 RESULT = new Node("~", "primario"); Logger.print("~");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // postfixExpr ::= primaryExpr 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("461 " + p); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // postfixExpr ::= postfixExpr LSQRBRK expr RSQRBRK 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("462 " + e); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // postfixExpr ::= postfixExpr LSQRBRK bracedInitListOpt RSQRBRK 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Logger.print("463 " + p); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // postfixExpr ::= postfixExpr LPAR RPAR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Logger.print("464 " + p); SemanticAnalysis.getInstance().isFunction(p); SemanticAnalysis.getInstance().checkFunctionCallException(((Function) p).getName()); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // postfixExpr ::= postfixExpr LPAR initializeList RPAR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("465 " + p + " " + i); SemanticAnalysis.getInstance().checkFunctionCallException(((Function) p).getName(), Util.convertToTypeArray((ArrayList<Expression>) i)); RESULT = new Expression(((Function)p).getReturnType()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // postfixExpr ::= simpleTypeSpec LPAR exprListOpt RPAR 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Logger.print("466 " + st); Function e = new Function(((Type)st).getName()); e.setReturnType((Type)st); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // postfixExpr ::= typenameSpec LPAR exprListOpt RPAR 
            {
              Object RESULT =null;
		 Logger.print("467 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // postfixExpr ::= simpleTypeSpec bracedInitList 
            {
              Object RESULT =null;
		 Logger.print("468 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // postfixExpr ::= typenameSpec bracedInitList 
            {
              Object RESULT =null;
		 Logger.print("469 "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // postfixExpr ::= postfixExpr DOT idExpr 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("646p1 " + p); RESULT = SemanticAnalysis.getInstance().createMethodFunction((Expression)p, (String)e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // postfixExpr ::= postfixExpr ARROW idExpr 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("646p1 " + p); RESULT = SemanticAnalysis.getInstance().createMethodFunction((Expression)p, (String)e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // postfixExpr ::= postfixExpr DOT pseudoDestructorName 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Logger.print("470 " + p); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // postfixExpr ::= postfixExpr AUTOINCRM 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("471 " + p); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // postfixExpr ::= postfixExpr AUTODECRM 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("472 " + p); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // idExpr ::= unqualifiedId 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("471 unqualifiedID " + u ); RESULT = u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idExpr",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // idExpr ::= qualifiedId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idExpr",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // unqualifiedId ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("475 identifier " + i ); RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unqualifiedId",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // unqualifiedId ::= operatorFunctionId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unqualifiedId",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // unqualifiedId ::= conversionFunctionId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unqualifiedId",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // unqualifiedId ::= BINNEG className 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unqualifiedId",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // operatorFunctionId ::= OPERATOR overloadableOperator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operatorFunctionId",155, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // conversionFunctionId ::= OPERATOR conversionTypeId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conversionFunctionId",156, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // conversionTypeId ::= typeSpecSeq conversionDeclaratorOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conversionTypeId",157, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // primaryExpr ::= literal 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l;  Logger.print("499 literal " + l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // primaryExpr ::= THIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // primaryExpr ::= LPAR expr RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e;  Logger.print("501 expression " + e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // primaryExpr ::= idExpr 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("502 " + i); RESULT = SemanticAnalysis.getInstance().getIdentifier((String) i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // lambdaExpr ::= lambdaIntroducer lambdaDeclaratorOpt compoundStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambdaExpr",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // compoundStatement ::= LBRK RBRK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compoundStatement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // compoundStatement ::= LBRK statementSeq RBRK 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s;  Logger.print("514 statementSeq" + s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compoundStatement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // statementSeqOpt ::= statementSeq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementSeqOpt",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // statementSeqOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementSeqOpt",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // statementSeq ::= statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s;  Logger.print("519 statement " + s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementSeq",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // statementSeq ::= statementSeq statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementSeq",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // statement ::= labeledStatement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("ANTES 529 labeled"); RESULT = s;  Logger.print("523 labeled_statement: " + s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // statement ::= exprOpt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("ANTES 529 expression"); RESULT = s;  Logger.print("524 exprOpt_statement: " + s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // statement ::= compoundStatement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("ANTES 529 compound"); RESULT = s;  Logger.print("525 compound_statement: " + s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // statement ::= selectionStatement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("ANTES 529 selection"); RESULT = s;  Logger.print("526 selection_statement: " + s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // statement ::= iterationStatement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s;  Logger.print("527 iteration_statement: " + s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // statement ::= jumpStatement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s;  Logger.print("528 jump_statement: " + s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // statement ::= blockDeclaration 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("ANTES 529 blockDeclaration_statement");  RESULT = s;  Logger.print("529 blockDeclaration_statement: " + s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // statement ::= tryBlock 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s;  Logger.print("530 tryBlock_statement: " + s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // labeledStatement ::= IDENTIFIER COLON statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labeledStatement",151, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // labeledStatement ::= CASE constExpr COLON statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labeledStatement",151, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // labeledStatement ::= DEFAULT COLON statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labeledStatement",151, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // exprOpt ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprOpt",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // exprOpt ::= expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprOpt",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // NT$1 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 Logger.print("551 if condition "); SemanticAnalysis.getInstance().createIf(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",177, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 SemanticAnalysis.getInstance().exitCurrentScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",178, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // selectionStatement ::= IF LPAR condition RPAR NT$1 statement NT$2 ruleAux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selectionStatement",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // NT$3 ::= 
            {
              Object RESULT =null;
 Logger.print("568 else condition "); SemanticAnalysis.getInstance().createElse(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",179, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // ruleAux ::= NT$3 ELSE statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 SemanticAnalysis.getInstance().exitCurrentScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ruleAux",171, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // ruleAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ruleAux",171, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // condition ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("condition->expression " + e); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",160, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // condition ::= declSpecSeq declarator ASSIGNMENT initializeCls 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",160, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // condition ::= declSpecSeq declarator bracedInitList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",160, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // conditionOpt ::= condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionOpt",161, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // conditionOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionOpt",161, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // iterationStatement ::= WHILE LPAR condition RPAR statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterationStatement",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // iterationStatement ::= DO statement WHILE LPAR expr RPAR SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterationStatement",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // iterationStatement ::= FOR LPAR forInitStatement conditionOpt SEMICOLON exprOpt RPAR statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterationStatement",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // iterationStatement ::= FOR LPAR forRangeDeclaration COLON forRangeInitializer RPAR statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterationStatement",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // forRangeDeclaration ::= typeSpecSeq declarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forRangeDeclaration",170, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // forRangeInitializer ::= expr bracedInitList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forRangeInitializer",169, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // forInitStatement ::= exprOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forInitStatement",167, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // forInitStatement ::= simpleDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forInitStatement",167, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // jumpStatement ::= BREAK SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("566 BREAK ;"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jumpStatement",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // jumpStatement ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("567 CONTINUE ;"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jumpStatement",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // jumpStatement ::= RETURN SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("568 BREAK ;"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jumpStatement",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // jumpStatement ::= RETURN expr SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("****"); SemanticAnalysis.getInstance().checkReturnedType(e); Logger.print("448 RETURN expr ; " + e); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jumpStatement",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // jumpStatement ::= GOTO IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jumpStatement",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // literal ::= integerLiteral 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("575 literal (integerLiteral:i) " + i); RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // literal ::= characterLiteral 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("575 literal (characterLiteral:c)" + c); RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // literal ::= floatingLiteral 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("575 literal (floatingLiteral:f)" + f); RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // literal ::= stringLiteral 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("575 literal (stringLiteral:s)" + s); RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // literal ::= booleanLiteral 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("575 literal (booleanLiteral:b)" + b); RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // literal ::= pointerLiteral 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // literal ::= userDefinedLiteral 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // integerLiteral ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("584 " + i); RESULT = new Expression(new Type("int"), i.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integerLiteral",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // floatingLiteral ::= FLOATING 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("585 " + f); RESULT = new Expression(new Type("float"), f.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("floatingLiteral",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // floatingLiteral ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("585 " + i); RESULT = new Expression(new Type("float"), i.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("floatingLiteral",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // booleanLiteral ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("686 " + t); RESULT = new Expression(new Type("bool"), t.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("booleanLiteral",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // booleanLiteral ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("687 " + f); RESULT = new Expression(new Type("bool"), f.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("booleanLiteral",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // pointerLiteral ::= NULLPTR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointerLiteral",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // stringLiteral ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("628 " + s); RESULT = new Expression(new Type("string"), s.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stringLiteral",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // bracedInitListOpt ::= bracedInitList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bracedInitListOpt",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // bracedInitListOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bracedInitListOpt",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // exprListOpt ::= initializeList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprListOpt",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000001(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // exprListOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprListOpt",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // typeIdListOpt ::= typeIdList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeIdListOpt",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // typeIdListOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeIdListOpt",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // typeIdList ::= typeId dotsOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeIdList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // typeIdList ::= typeIdList COMMA typeId dotsOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeIdList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // refQualifierOpt ::= refQualifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("refQualifierOpt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // refQualifierOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("refQualifierOpt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // refQualifier ::= SINGLEAND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("refQualifier",118, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // refQualifier ::= DOUBLEAND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("refQualifier",118, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // cvQualifierSeq ::= cvQualifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvQualifierSeq",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // cvQualifierSeq ::= cvQualifier cvQualifierSeq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvQualifierSeq",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // cvQualifier ::= CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvQualifier",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // cvQualifier ::= VOLATILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvQualifier",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // trailingReturnType ::= ARROW trailingTypeSpecSeq abstractDeclaratorOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailingReturnType",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // trailingTypeSpecSeq ::= trailingTypeSpec attributeSpecSeqOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailingTypeSpecSeq",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // trailingTypeSpecSeq ::= trailingTypeSpec trailingTypeSpecSeq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailingTypeSpecSeq",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // ptrAbstractDeclarator ::= noPtrAbstractDeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptrAbstractDeclarator",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // ptrAbstractDeclarator ::= ptrOperator ptrAbstractDeclaratorOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptrAbstractDeclarator",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // ptrAbstractDeclaratorOpt ::= ptrAbstractDeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptrAbstractDeclaratorOpt",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // ptrAbstractDeclaratorOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptrAbstractDeclaratorOpt",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // ptrOperator ::= STAR attributeSpecSeqOpt cvQualifierSeqOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptrOperator",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // ptrOperator ::= SINGLEAND attributeSpecSeqOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptrOperator",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // ptrOperator ::= DOUBLEAND attributeSpecSeqOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptrOperator",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // ptrOperator ::= SEPPTR nestedNameSpec SINGLEAND attributeSpecSeqOpt cvQualifierSeqOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptrOperator",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // ptrOperator ::= nestedNameSpec SINGLEAND attributeSpecSeqOpt cvQualifierSeqOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptrOperator",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // typeSpecSeq ::= typeSpec typeSpecSeq2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeSpecSeq",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // typeSpecSeq2 ::= typeSpecSeq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeSpecSeq2",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // typeSpecSeq2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeSpecSeq2",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // typeSpec ::= trailingTypeSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeSpec",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // typeSpec ::= classSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeSpec",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // typeSpec ::= enumSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeSpec",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // enumSpec ::= enumHead LBRK enumListOpt RBRK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumSpec",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // enumSpec ::= enumHead LBRK enumList COMMA RBRK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumSpec",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // classSpec ::= classHead LBRK memberSpecificationOpt RBRK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classSpec",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // memberSpecificationOpt ::= memberSpecification 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("memberSpecificationOpt",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // memberSpecificationOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("memberSpecificationOpt",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // classHead ::= classKey attributeSpecSeqOpt classHead2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classHead",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // classHead2 ::= classHeadName classVirtSpecSeqOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classHead2",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // classKey ::= CLASS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classKey",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // classKey ::= STRUCT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classKey",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // classKey ::= UNION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classKey",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // classVirtSpecSeqOpt ::= classVirtSpecSeq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classVirtSpecSeqOpt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // classVirtSpecSeqOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classVirtSpecSeqOpt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // classVirtSpecSeq ::= classVirtSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classVirtSpecSeq",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // classVirtSpecSeq ::= classVirtSpecSeq classVirtSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classVirtSpecSeq",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // classVirtSpec ::= FINAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classVirtSpec",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // classVirtSpec ::= EXPLICIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classVirtSpec",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // accessSpecOpt ::= accessSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accessSpecOpt",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // accessSpecOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accessSpecOpt",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // accessSpec ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accessSpec",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // accessSpec ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accessSpec",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // accessSpec ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accessSpec",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // classOrDeclType ::= COLON COLON nestedNameSpec className 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classOrDeclType",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // classOrDeclType ::= nestedNameSpec className 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classOrDeclType",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // classOrDeclType ::= COLON COLON className 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classOrDeclType",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // classOrDeclType ::= className 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classOrDeclType",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // classOrDeclType ::= declTypeSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classOrDeclType",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // className ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("className",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // declTypeSpec ::= DECLTYPE LPAR expr RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declTypeSpec",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // attributeSpecSeqOpt ::= attributeSpecSeq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeSpecSeqOpt",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // attributeSpecSeqOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeSpecSeqOpt",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // attributeSpecSeq ::= attributeSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeSpecSeq",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // attributeSpecSeq ::= attributeSpecSeq attributeSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeSpecSeq",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // attributeSpec ::= LSQRBRK LSQRBRK attributeList RSQRBRK RSQRBRK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeSpec",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // attributeSpec ::= alignmentSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeSpec",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // attributeList ::= attribute DOTS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeList",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // attributeList ::= attributeList COMMA attribute DOTS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeList",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // attributeList ::= attributeOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeList",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // attributeList ::= attributeList COMMA attributeOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeList",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // attributeOpt ::= attribute 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeOpt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // attributeOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeOpt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // attribute ::= attributeToken attributeArgClsOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribute",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // attributeArgClsOpt ::= attributeArgCls 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeArgClsOpt",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // attributeArgClsOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeArgClsOpt",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // attributeToken ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeToken",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // attributeToken ::= attributeScopedToken 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeToken",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // attributeScopedToken ::= IDENTIFIER COLON COLON IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeScopedToken",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // attributeArgCls ::= LPAR balancedTokenSeq RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeArgCls",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // balancedTokenSeq ::= balancedToken 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("balancedTokenSeq",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // balancedTokenSeq ::= balancedTokenSeq balancedToken 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("balancedTokenSeq",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // balancedToken ::= LPAR balancedTokenSeq RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("balancedToken",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // balancedToken ::= LSQRBRK balancedTokenSeq RSQRBRK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("balancedToken",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // balancedToken ::= LBRK balancedTokenSeq RBRK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("balancedToken",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // balancedToken ::= token 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("balancedToken",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // alignmentSpec ::= ALIGNAS LPAR typeId dotsOpt RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alignmentSpec",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // emptyDeclaration ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("emptyDeclaration",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // dotsOpt ::= DOTS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dotsOpt",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // dotsOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dotsOpt",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // overloadableOperator ::= NEW 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("overloadableOperator",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Parser$do_action_part00000001(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
